{"ast":null,"code":"var _jsxFileName = \"/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/visualization/Legend.tsx\";\nimport React from 'react';\nimport { format } from 'd3-format';\nimport { scaleLinear, scaleOrdinal, scaleThreshold, scaleQuantile } from '@visx/scale';\nimport { LegendThreshold, LegendItem, LegendLabel } from '@visx/legend';\nconst oneDecimalFormat = format('.1f');\nconst sizeScale = scaleLinear({\n  domain: [0, 10],\n  range: [5, 13]\n});\nconst sizeColorScale = scaleLinear({\n  domain: [0, 10],\n  range: ['#75fcfc', '#3236b8']\n});\nconst quantileScale = scaleQuantile({\n  domain: [0, 0.15],\n  range: ['#eb4d70', '#f19938', '#6ce18b', '#78f6ef', '#9096f8']\n});\nconst linearScale = scaleLinear({\n  domain: [0, 10],\n  range: ['#ed4fbb', '#e9a039']\n});\nconst thresholdScale = scaleThreshold({\n  domain: [50, 60, 70, 80, 90],\n  range: ['#122549', 'rgb(26,44,78)', 'rgb(37,59,82)', 'rgb(66,101,113)', 'rgb(84,127,131)', '#b4fbde']\n});\nconst ordinalColorScale = scaleOrdinal({\n  domain: ['a', 'b', 'c', 'd'],\n  range: ['#66d981', '#71f5ef', '#4899f1', '#7d81f6']\n});\nconst ordinalColor2Scale = scaleOrdinal({\n  domain: ['a', 'b', 'c', 'd'],\n  range: ['#fae856', '#f29b38', '#e64357', '#8386f7']\n});\nconst legendGlyphSize = 15;\nexport default function LegendChart(_ref) {\n  let {\n    events = false\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"legends\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LegendDemo, {\n    title: \"Legend [%]\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LegendThreshold, {\n    scale: thresholdScale,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, labels => labels.reverse().map((label, i) => /*#__PURE__*/React.createElement(LegendItem, {\n    key: `legend-quantile-${i}`,\n    margin: \"1px 0\",\n    onClick: () => {\n      if (events) alert(`clicked: ${JSON.stringify(label)}`);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    width: legendGlyphSize,\n    height: legendGlyphSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    fill: label.value,\n    width: legendGlyphSize,\n    height: legendGlyphSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(LegendLabel, {\n    align: \"left\",\n    margin: \"2px 0 0 10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 33\n    }\n  }, label.text))))));\n}\n\nfunction LegendDemo(_ref2) {\n  let {\n    title,\n    children\n  } = _ref2;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"legend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, title), children, /*#__PURE__*/React.createElement(\"style\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, `\n        .legend {\n          line-height: 0.9em;\n          color: #efefef;\n          font-size: 10px;\n          font-family: arial;\n          padding: 10px 10px;\n          float: left;\n          border: 1px solid rgba(255, 255, 255, 0.3);\n          border-radius: 8px;\n          margin: 5px 5px;\n        }\n        .title {\n          font-size: 12px;\n          margin-bottom: 10px;\n          font-weight: 100;\n        }\n      `));\n}","map":{"version":3,"sources":["/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/visualization/Legend.tsx"],"names":["React","format","scaleLinear","scaleOrdinal","scaleThreshold","scaleQuantile","LegendThreshold","LegendItem","LegendLabel","oneDecimalFormat","sizeScale","domain","range","sizeColorScale","quantileScale","linearScale","thresholdScale","ordinalColorScale","ordinalColor2Scale","legendGlyphSize","LegendChart","events","labels","reverse","map","label","i","alert","JSON","stringify","value","text","LegendDemo","title","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { format } from 'd3-format';\nimport { scaleLinear, scaleOrdinal, scaleThreshold, scaleQuantile } from '@visx/scale';\nimport\n    {\n        Legend,\n        LegendLinear,\n        LegendQuantile,\n        LegendOrdinal,\n        LegendSize,\n        LegendThreshold,\n        LegendItem,\n        LegendLabel,\n    } from '@visx/legend';\n\nconst oneDecimalFormat = format('.1f');\n\nconst sizeScale = scaleLinear<number>({\n    domain: [0, 10],\n    range: [5, 13],\n});\n\nconst sizeColorScale = scaleLinear<string>({\n    domain: [0, 10],\n    range: ['#75fcfc', '#3236b8'],\n});\n\nconst quantileScale = scaleQuantile<string>({\n    domain: [0, 0.15],\n    range: ['#eb4d70', '#f19938', '#6ce18b', '#78f6ef', '#9096f8'],\n});\n\nconst linearScale = scaleLinear<string>({\n    domain: [0, 10],\n    range: ['#ed4fbb', '#e9a039'],\n});\n\nconst thresholdScale = scaleThreshold<number, string>({\n    domain: [50, 60,70, 80 ,90],\n    range: ['#122549', 'rgb(26,44,78)', 'rgb(37,59,82)', 'rgb(66,101,113)', 'rgb(84,127,131)', '#b4fbde'],\n});\n\nconst ordinalColorScale = scaleOrdinal<string, string>({\n    domain: ['a', 'b', 'c', 'd'],\n    range: ['#66d981', '#71f5ef', '#4899f1', '#7d81f6'],\n});\n\nconst ordinalColor2Scale = scaleOrdinal<string, string>({\n    domain: ['a', 'b', 'c', 'd'],\n    range: ['#fae856', '#f29b38', '#e64357', '#8386f7'],\n});\n\nconst legendGlyphSize = 15;\n\nexport default function LegendChart({ events = false }: { events?: boolean })\n{\n    return (\n        <div className=\"legends\">\n            {/* <LegendDemo title=\"Size\">\n                <LegendSize scale={sizeScale}>\n                    {labels =>\n                        labels.map(label =>\n                        {\n                            const size = sizeScale(label.datum);\n                            const color = sizeColorScale(label.datum);\n                            return (\n                                <LegendItem\n                                    key={`legend-${label.text}-${label.index}`}\n                                    onClick={() =>\n                                    {\n                                        if (events) alert(`clicked: ${JSON.stringify(label)}`);\n                                    }}\n                                >\n                                    <svg width={size} height={size} style={{ margin: '5px 0' }}>\n                                        <circle fill={color} r={size / 2} cx={size / 2} cy={size / 2} />\n                                    </svg>\n                                    <LegendLabel align=\"left\" margin=\"0 4px\">\n                                        {label.text}\n                                    </LegendLabel>\n                                </LegendItem>\n                            );\n                        })\n                    }\n                </LegendSize>\n            </LegendDemo>\n            <LegendDemo title=\"Quantile\">\n                <LegendQuantile scale={quantileScale}>\n                    {labels =>\n                        labels.map((label, i) => (\n                            <LegendItem\n                                key={`legend-${i}`}\n                                onClick={() =>\n                                {\n                                    if (events) alert(`clicked: ${JSON.stringify(label)}`);\n                                }}\n                            >\n                                <svg width={legendGlyphSize} height={legendGlyphSize} style={{ margin: '2px 0' }}>\n                                    <circle\n                                        fill={label.value}\n                                        r={legendGlyphSize / 2}\n                                        cx={legendGlyphSize / 2}\n                                        cy={legendGlyphSize / 2}\n                                    />\n                                </svg>\n                                <LegendLabel align=\"left\" margin=\"0 4px\">\n                                    {label.text}\n                                </LegendLabel>\n                            </LegendItem>\n                        ))\n                    }\n                </LegendQuantile>\n            </LegendDemo>\n            <LegendDemo title=\"Linear\">\n                <LegendLinear\n                    scale={linearScale}\n                    labelFormat={(d, i) => (i % 2 === 0 ? oneDecimalFormat(d) : '')}\n                >\n                    {labels =>\n                        labels.map((label, i) => (\n                            <LegendItem\n                                key={`legend-quantile-${i}`}\n                                onClick={() =>\n                                {\n                                    if (events) alert(`clicked: ${JSON.stringify(label)}`);\n                                }}\n                            >\n                                <svg width={legendGlyphSize} height={legendGlyphSize} style={{ margin: '2px 0' }}>\n                                    <circle\n                                        fill={label.value}\n                                        r={legendGlyphSize / 2}\n                                        cx={legendGlyphSize / 2}\n                                        cy={legendGlyphSize / 2}\n                                    />\n                                </svg>\n                                <LegendLabel align=\"left\" margin=\"0 4px\">\n                                    {label.text}\n                                </LegendLabel>\n                            </LegendItem>\n                        ))\n                    }\n                </LegendLinear>\n            </LegendDemo> */}\n            <LegendDemo title=\"Legend [%]\">\n                <LegendThreshold scale={thresholdScale}>\n                    {labels =>\n                        labels.reverse().map((label, i) => (\n                            <LegendItem\n                                key={`legend-quantile-${i}`}\n                                margin=\"1px 0\"\n                                onClick={() =>\n                                {\n                                    if (events) alert(`clicked: ${JSON.stringify(label)}`);\n                                }}\n                            >\n                                <svg width={legendGlyphSize} height={legendGlyphSize}>\n                                    <rect fill={label.value} width={legendGlyphSize} height={legendGlyphSize} />\n                                </svg>\n                                <LegendLabel align=\"left\" margin=\"2px 0 0 10px\">\n                                    {label.text}\n                                </LegendLabel>\n                            </LegendItem>\n                        ))\n                    }\n                </LegendThreshold>\n            </LegendDemo>\n            {/* <LegendDemo title=\"Ordinal\">\n                <LegendOrdinal scale={ordinalColorScale} labelFormat={label => `${label.toUpperCase()}`}>\n                    {labels => (\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\n                            {labels.map((label, i) => (\n                                <LegendItem\n                                    key={`legend-quantile-${i}`}\n                                    margin=\"0 5px\"\n                                    onClick={() =>\n                                    {\n                                        if (events) alert(`clicked: ${JSON.stringify(label)}`);\n                                    }}\n                                >\n                                    <svg width={legendGlyphSize} height={legendGlyphSize}>\n                                        <rect fill={label.value} width={legendGlyphSize} height={legendGlyphSize} />\n                                    </svg>\n                                    <LegendLabel align=\"left\" margin=\"0 0 0 4px\">\n                                        {label.text}\n                                    </LegendLabel>\n                                </LegendItem>\n                            ))}\n                        </div>\n                    )}\n                </LegendOrdinal>\n            </LegendDemo> */}\n        </div>\n    );\n}\n\nfunction LegendDemo({ title, children }: { title: string; children: React.ReactNode })\n{\n    return (\n        <div className=\"legend\">\n            <div className=\"title\">{title}</div>\n            {children}\n            <style>{`\n        .legend {\n          line-height: 0.9em;\n          color: #efefef;\n          font-size: 10px;\n          font-family: arial;\n          padding: 10px 10px;\n          float: left;\n          border: 1px solid rgba(255, 255, 255, 0.3);\n          border-radius: 8px;\n          margin: 5px 5px;\n        }\n        .title {\n          font-size: 12px;\n          margin-bottom: 10px;\n          font-weight: 100;\n        }\n      `}</style>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}