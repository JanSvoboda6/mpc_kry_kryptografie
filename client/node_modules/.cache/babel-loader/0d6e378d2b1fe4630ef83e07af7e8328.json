{"ast":null,"code":"import axios from \"axios\";\nimport authorizationHeader from \"../services/AuthorizationHeader\";\nconst API_URL = \"http://localhost:8080/api\";\n\nconst run = (projectId, gammaParameter, cParameter) => {\n  return axios.post(API_URL + '/project/runner/run', {\n    projectId: projectId,\n    gammaParameter: gammaParameter,\n    cParameter: cParameter\n  }, {\n    headers: authorizationHeader()\n  });\n};\n\nconst stop = (projectId, runnerId) => {//not implemented\n};\n\nconst isFinished = (projectId, runnerId) => {\n  return axios.post(API_URL + '/project/runner/finished', {\n    projectId: projectId,\n    runnerId: runnerId\n  }, {\n    headers: authorizationHeader()\n  });\n};\n\nexport default {\n  run,\n  stop,\n  isFinished\n};","map":{"version":3,"sources":["/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/services/RunnerService.ts"],"names":["axios","authorizationHeader","API_URL","run","projectId","gammaParameter","cParameter","post","headers","stop","runnerId","isFinished"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,MAAMC,OAAO,GAAG,2BAAhB;;AAEA,MAAMC,GAAG,GAAG,CAACC,SAAD,EAAoBC,cAApB,EAA4CC,UAA5C,KACZ;AACI,SAAON,KAAK,CAACO,IAAN,CAAgBL,OAAO,GAAG,qBAA1B,EAAiD;AAAEE,IAAAA,SAAS,EAAEA,SAAb;AAAwBC,IAAAA,cAAc,EAAEA,cAAxC;AAAwDC,IAAAA,UAAU,EAAEA;AAApE,GAAjD,EAAmI;AAAEE,IAAAA,OAAO,EAAEP,mBAAmB;AAA9B,GAAnI,CAAP;AACH,CAHD;;AAKA,MAAMQ,IAAI,GAAG,CAACL,SAAD,EAAoBM,QAApB,KACb,CACI;AACH,CAHD;;AAKA,MAAMC,UAAU,GAAG,CAACP,SAAD,EAAoBM,QAApB,KACnB;AACI,SAAOV,KAAK,CAACO,IAAN,CAAgBL,OAAO,GAAG,0BAA1B,EAAsD;AAAEE,IAAAA,SAAS,EAAEA,SAAb;AAAwBM,IAAAA,QAAQ,EAAEA;AAAlC,GAAtD,EAAoG;AAAEF,IAAAA,OAAO,EAAEP,mBAAmB;AAA9B,GAApG,CAAP;AACH,CAHD;;AAKA,eAAe;AAAEE,EAAAA,GAAF;AAAOM,EAAAA,IAAP;AAAaE,EAAAA;AAAb,CAAf","sourcesContent":["import axios from \"axios\";\nimport authorizationHeader from \"../services/AuthorizationHeader\";\nconst API_URL = \"http://localhost:8080/api\";\n\nconst run = (projectId: number, gammaParameter: number, cParameter: number) =>\n{\n    return axios.post<any>(API_URL + '/project/runner/run', { projectId: projectId, gammaParameter: gammaParameter, cParameter: cParameter }, { headers: authorizationHeader() });\n}\n\nconst stop = (projectId: number, runnerId: number) =>\n{\n    //not implemented\n}\n\nconst isFinished = (projectId: number, runnerId: number) =>\n{\n    return axios.post<any>(API_URL + '/project/runner/finished', { projectId: projectId, runnerId: runnerId }, { headers: authorizationHeader() });\n}\n\nexport default { run, stop, isFinished }"]},"metadata":{},"sourceType":"module"}