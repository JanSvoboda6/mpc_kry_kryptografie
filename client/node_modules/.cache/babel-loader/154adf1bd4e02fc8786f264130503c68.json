{"ast":null,"code":"import axios from \"axios\";\nimport authorizationHeader from \"../../services/AuthorizationHeader\";\nconst API_URL = \"http://localhost:8080/api/dataset\";\n\nconst getFiles = () => {\n  return axios.get(API_URL, {\n    headers: authorizationHeader()\n  });\n};\n\nconst createDirectory = directory => {\n  return axios.post(API_URL + '/createdirectory', directory, {\n    headers: {\n      'Authorization': authorizationHeader()['Authorization'],\n      'Content-type': 'application/json; charset=utf-8'\n    }\n  });\n};\n\nconst uploadFiles = files => {\n  let formData = new FormData();\n  let keys = [];\n  files.forEach(file => {\n    keys.push(file.key);\n  });\n  let jsonLabelData = {\n    'keys': keys\n  };\n  formData.append('keys', new Blob([JSON.stringify(jsonLabelData)], {\n    type: 'application/json'\n  }));\n\n  for (let key of Object.keys(files)) {\n    if (key !== 'length') {\n      formData.append('files', files[key].data);\n    }\n  }\n\n  return axios.post(API_URL + '/upload', formData, {\n    headers: authorizationHeader()\n  });\n};\n\nconst deleteFolders = keys => {\n  return axios.post(API_URL + '/folders/delete', keys, {\n    headers: {\n      'Authorization': authorizationHeader()['Authorization'],\n      'Content-type': 'application/json; charset=utf-8'\n    }\n  });\n};\n\nconst deleteFiles = keys => {\n  return axios.post(API_URL + '/files/delete', keys, {\n    headers: {\n      'Authorization': authorizationHeader()['Authorization'],\n      'Content-type': 'application/json; charset=utf-8'\n    }\n  });\n};\n\nconst moveFile = (oldKey, newKey) => {\n  return axios.post(API_URL + '/files/move', {\n    oldKey,\n    newKey\n  }, {\n    headers: {\n      'Authorization': authorizationHeader()['Authorization'],\n      'Content-type': 'application/json; charset=utf-8'\n    }\n  });\n};\n\nconst moveFolder = (oldKey, newKey) => {\n  return axios.post(API_URL + '/folders/move', {\n    oldKey,\n    newKey\n  }, {\n    headers: {\n      'Authorization': authorizationHeader()['Authorization'],\n      'Content-type': 'application/json; charset=utf-8'\n    }\n  });\n};\n\nconst download = keys => {\n  return axios.post(API_URL + '/download', keys, {\n    headers: {\n      'Authorization': authorizationHeader()['Authorization'],\n      'Content-type': 'application/json; charset=utf-8'\n    },\n    responseType: 'blob'\n  });\n};\n\nexport default {\n  getFiles,\n  createDirectory,\n  uploadFiles,\n  deleteFolders,\n  deleteFiles,\n  moveFile,\n  moveFolder,\n  download\n};","map":{"version":3,"sources":["/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/dataset/DatasetService.tsx"],"names":["axios","authorizationHeader","API_URL","getFiles","get","headers","createDirectory","directory","post","uploadFiles","files","formData","FormData","keys","forEach","file","push","key","jsonLabelData","append","Blob","JSON","stringify","type","Object","data","deleteFolders","deleteFiles","moveFile","oldKey","newKey","moveFolder","download","responseType"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { FileInformation } from \"../../types\";\nimport authorizationHeader from \"../../services/AuthorizationHeader\";\nconst API_URL = \"http://localhost:8080/api/dataset\";\n\nconst getFiles = () =>\n{\n    return axios.get(API_URL, {headers: authorizationHeader()});\n}\n\nconst createDirectory = (directory: FileInformation) =>\n{\n    return axios.post(\n        API_URL + '/createdirectory',\n        directory,\n        {\n            headers: \n            {\n                'Authorization': authorizationHeader()['Authorization'],\n                'Content-type': 'application/json; charset=utf-8'\n            }\n        }\n    );\n};\n\nconst uploadFiles = (files: any) => \n{\n    let formData = new FormData();\n    let keys: any = [];\n\n    files.forEach(file =>\n    {\n        keys.push(file.key);\n    });\n\n    let jsonLabelData = {\n        'keys': keys\n    };\n\n    formData.append(\n        'keys',\n        new Blob([JSON.stringify(jsonLabelData)], {\n            type: 'application/json'\n        }));\n\n    for (let key of Object.keys(files))\n    {\n        if (key !== 'length')\n        {\n            formData.append('files', files[key].data);\n        }\n    }\n\n    return axios.post(API_URL + '/upload', formData, { headers: authorizationHeader() }, );\n}\n\nconst deleteFolders = (keys: string[]) => {\n    return axios.post(\n        API_URL + '/folders/delete',\n        keys,\n        {\n            headers:\n                {\n                    'Authorization': authorizationHeader()['Authorization'],\n                    'Content-type': 'application/json; charset=utf-8'\n                }\n        }\n    );\n}\n\nconst deleteFiles = (keys: string[]) => {\n    return axios.post(\n        API_URL + '/files/delete',\n        keys,\n        {\n            headers:\n                {\n                    'Authorization': authorizationHeader()['Authorization'],\n                    'Content-type': 'application/json; charset=utf-8'\n                }\n        }\n    );\n}\n\nconst moveFile = (oldKey: string, newKey: string) => {\n    return axios.post(\n        API_URL + '/files/move',\n        {oldKey, newKey},\n        {\n            headers:\n                {\n                    'Authorization': authorizationHeader()['Authorization'],\n                    'Content-type': 'application/json; charset=utf-8'\n                }\n        }\n    );\n}\n\nconst moveFolder = (oldKey: string, newKey: string) => {\n    return axios.post(\n        API_URL + '/folders/move',\n        {oldKey, newKey},\n        {\n            headers:\n                {\n                    'Authorization': authorizationHeader()['Authorization'],\n                    'Content-type': 'application/json; charset=utf-8'\n                }\n        }\n    );\n}\n\nconst download = (keys: string[]) => {\n    return axios.post<{ data: byte[] }>(\n        API_URL + '/download',\n        keys,\n        {\n            headers:\n                {\n                    'Authorization': authorizationHeader()['Authorization'],\n                    'Content-type': 'application/json; charset=utf-8'\n                },\n            responseType: 'blob'\n        }\n    );\n}\n\nexport default { getFiles, createDirectory, uploadFiles, deleteFolders, deleteFiles, moveFile, moveFolder, download }"]},"metadata":{},"sourceType":"module"}