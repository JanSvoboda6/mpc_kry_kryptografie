{"ast":null,"code":"var _jsxFileName = \"/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/analysis/DefaultAxis.tsx\";\nimport React, { useState, useMemo } from 'react';\nimport { scaleLinear, scaleBand, coerceNumber } from '@visx/scale';\nimport { Axis, Orientation } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { AnimatedAxis, AnimatedGridRows, AnimatedGridColumns } from '@visx/react-spring';\nimport { getSeededRandom } from '@visx/mock-data';\nexport const backgroundColor = '#da7cff';\nconst axisColor = '#fff';\nconst tickLabelColor = '#fff';\nexport const labelColor = '#fff';\nconst gridColor = '#6e0fca';\nconst seededRandom = getSeededRandom(0.5);\nconst defaultMargin = {\n  top: 20,\n  right: 30,\n  bottom: 30,\n  left: 50\n};\n\nconst tickLabelProps = () => ({\n  dy: '0em',\n  dx: '0em',\n  fill: tickLabelColor,\n  fontSize: 14,\n  fontFamily: 'sans-serif',\n  textAnchor: 'middle'\n});\n\nconst getMinMax = vals => {\n  const numericVals = vals.map(coerceNumber);\n  return [Math.min(...numericVals), Math.max(...numericVals)];\n};\n\nexport default function DefaultAxis(_ref) {\n  let {\n    width: outerWidth = 800,\n    height: outerHeight = 800,\n    values = [],\n    orientation = \"bottom\",\n    margin = defaultMargin,\n    showControls = true,\n    dxTickLabel = '0em',\n    dyTickLabel = '0em'\n  } = _ref;\n  // use non-animated components if prefers-reduced-motion is set\n  const prefersReducedMotionQuery = typeof window === 'undefined' ? false : window.matchMedia('(prefers-reduced-motion: reduce)');\n  const prefersReducedMotion = !prefersReducedMotionQuery || !!prefersReducedMotionQuery.matches;\n  const [useAnimatedComponents, setUseAnimatedComponents] = useState(!prefersReducedMotion); // in svg, margin is subtracted from total width/height\n\n  const width = outerWidth - margin.left - margin.right;\n  const height = outerHeight - margin.top - margin.bottom;\n  const [dataToggle, setDataToggle] = useState(true);\n  const [animationTrajectory, setAnimationTrajectory] = useState('center'); // define some types\n\n  const AxisComponent = useAnimatedComponents ? AnimatedAxis : Axis;\n  const GridRowsComponent = useAnimatedComponents ? AnimatedGridRows : GridRows;\n  const GridColumnsComponent = useAnimatedComponents ? AnimatedGridColumns : GridColumns;\n  const axes = useMemo(() => {\n    return [{\n      scale: scaleBand({\n        domain: values,\n        range: [0, width],\n        paddingOuter: 0,\n        paddingInner: 1\n      }),\n      values: values,\n      tickFormat: v => v,\n      label: 'GAMMA'\n    }];\n  }, [dataToggle, width]);\n  if (width < 10) return null;\n  const scalePadding = 0;\n  const scaleHeight = height / axes.length - scalePadding;\n  const yScale = scaleLinear({\n    domain: [100, 0],\n    range: [scaleHeight, 0]\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"svg\", {\n    width: outerWidth,\n    height: outerHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    x: 0,\n    y: 0,\n    width: outerWidth,\n    height: outerHeight,\n    fill: 'url(#visx-axis-gradient)',\n    rx: 14,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    transform: `translate(${margin.left},${margin.top})`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, axes.map((_ref2, i) => {\n    let {\n      scale,\n      values,\n      label,\n      tickFormat\n    } = _ref2;\n    return /*#__PURE__*/React.createElement(\"g\", {\n      key: `scale-${i}`,\n      transform: `translate(0, ${i * (scaleHeight + scalePadding)})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(AxisComponent // force remount when this changes to see the animation difference\n    , {\n      key: `axis-${animationTrajectory}`,\n      orientation: orientation === \"bottom\" ? Orientation.bottom : Orientation.left,\n      top: scaleHeight,\n      scale: scale,\n      tickFormat: tickFormat,\n      stroke: axisColor,\n      tickStroke: axisColor,\n      tickLabelProps: () => ({\n        dy: dyTickLabel,\n        dx: dxTickLabel,\n        fill: tickLabelColor,\n        fontSize: 14,\n        fontFamily: 'sans-serif',\n        textAnchor: 'middle'\n      }),\n      tickValues: label === 'log' || label === 'time' ? undefined : values,\n      numTicks: label === 'time' ? 6 : undefined,\n      label: label,\n      labelProps: {\n        x: width + 30,\n        y: -10,\n        fill: labelColor,\n        fontSize: 18,\n        strokeWidth: 0,\n        stroke: '#fff',\n        paintOrder: 'stroke',\n        fontFamily: 'sans-serif',\n        textAnchor: 'start'\n      },\n      animationTrajectory: animationTrajectory,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 29\n      }\n    }));\n  }))));\n}","map":{"version":3,"sources":["/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/analysis/DefaultAxis.tsx"],"names":["React","useState","useMemo","scaleLinear","scaleBand","coerceNumber","Axis","Orientation","GridRows","GridColumns","AnimatedAxis","AnimatedGridRows","AnimatedGridColumns","getSeededRandom","backgroundColor","axisColor","tickLabelColor","labelColor","gridColor","seededRandom","defaultMargin","top","right","bottom","left","tickLabelProps","dy","dx","fill","fontSize","fontFamily","textAnchor","getMinMax","vals","numericVals","map","Math","min","max","DefaultAxis","width","outerWidth","height","outerHeight","values","orientation","margin","showControls","dxTickLabel","dyTickLabel","prefersReducedMotionQuery","window","matchMedia","prefersReducedMotion","matches","useAnimatedComponents","setUseAnimatedComponents","dataToggle","setDataToggle","animationTrajectory","setAnimationTrajectory","AxisComponent","GridRowsComponent","GridColumnsComponent","axes","scale","domain","range","paddingOuter","paddingInner","tickFormat","v","label","scalePadding","scaleHeight","length","yScale","i","undefined","x","y","strokeWidth","stroke","paintOrder"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport AreaClosed from '@visx/shape/lib/shapes/AreaClosed';\nimport { curveMonotoneX } from '@visx/curve';\nimport { scaleUtc, scaleLinear, scaleLog, scaleBand, ScaleInput, coerceNumber } from '@visx/scale';\nimport { Axis, Orientation, SharedAxisProps, AxisScale } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { AnimatedAxis, AnimatedGridRows, AnimatedGridColumns } from '@visx/react-spring';\nimport { getSeededRandom } from '@visx/mock-data';\n\nimport { timeFormat } from 'd3-time-format';\nimport { GridRowsProps } from '@visx/grid/lib/grids/GridRows';\nimport { GridColumnsProps } from '@visx/grid/lib/grids/GridColumns';\n\nexport const backgroundColor = '#da7cff';\nconst axisColor = '#fff';\nconst tickLabelColor = '#fff';\nexport const labelColor = '#fff';\nconst gridColor = '#6e0fca';\nconst seededRandom = getSeededRandom(0.5);\nconst defaultMargin = {\n    top: 20,\n    right: 30,\n    bottom: 30,\n    left: 50,\n};\n\nconst tickLabelProps = () =>\n({\n    dy: '0em',\n    dx: '0em',\n    fill: tickLabelColor,\n    fontSize: 14,\n    fontFamily: 'sans-serif',\n    textAnchor: 'middle',\n} as const);\n\nconst getMinMax = (vals: (number | { valueOf(): number })[]) =>\n{\n    const numericVals = vals.map(coerceNumber);\n    return [Math.min(...numericVals), Math.max(...numericVals)];\n};\n\nexport type AxisProps = {\n    width: number;\n    height: number;\n    values: Array<number>,\n    orientation: string;\n    margin?: {\n        top: number,\n        right: number,\n        bottom: number,\n        left: number\n    };\n    dyTickLabel?: string;\n    dxTickLabel?: string;\n    showControls?: boolean;\n};\n\ntype AnimationTrajectory = 'outside' | 'center' | 'min' | 'max' | undefined;\n\ntype AxisComponent = React.FC<\n    SharedAxisProps<AxisScale> & {\n        animationTrajectory: AnimationTrajectory;\n    }\n>;\ntype GridRowsComponent = React.FC<\n    GridRowsProps<AxisScale> & {\n        animationTrajectory: AnimationTrajectory;\n    }\n>;\ntype GridColumnsComponent = React.FC<\n    GridColumnsProps<AxisScale> & {\n        animationTrajectory: AnimationTrajectory;\n    }\n>;\n\nexport default function DefaultAxis({\n    width: outerWidth = 800,\n    height: outerHeight = 800,\n    values: values = [],\n    orientation = \"bottom\",\n    margin = defaultMargin,\n    showControls = true,\n    dxTickLabel = '0em',\n    dyTickLabel = '0em'\n}: AxisProps)\n{\n    // use non-animated components if prefers-reduced-motion is set\n    const prefersReducedMotionQuery =\n        typeof window === 'undefined' ? false : window.matchMedia('(prefers-reduced-motion: reduce)');\n    const prefersReducedMotion = !prefersReducedMotionQuery || !!prefersReducedMotionQuery.matches;\n    const [useAnimatedComponents, setUseAnimatedComponents] = useState(!prefersReducedMotion);\n\n    // in svg, margin is subtracted from total width/height\n    const width = outerWidth - margin.left - margin.right;\n    const height = outerHeight - margin.top - margin.bottom;\n    const [dataToggle, setDataToggle] = useState(true);\n    const [animationTrajectory, setAnimationTrajectory] = useState<AnimationTrajectory>('center');\n\n    // define some types\n    interface AxisDemoProps<Scale extends AxisScale> extends SharedAxisProps<Scale>\n    {\n        values: ScaleInput<Scale>[];\n    }\n\n    const AxisComponent: AxisComponent = useAnimatedComponents ? AnimatedAxis : Axis;\n    const GridRowsComponent: GridRowsComponent = useAnimatedComponents ? AnimatedGridRows : GridRows;\n    const GridColumnsComponent: GridColumnsComponent = useAnimatedComponents\n        ? AnimatedGridColumns\n        : GridColumns;\n\n    const axes: AxisDemoProps<AxisScale<number>>[] = useMemo(() =>\n    {\n        return [\n            {\n                scale: scaleBand({\n                    domain: values,\n                    range: [0, width],\n                    paddingOuter: 0,\n                    paddingInner: 1,\n                }),\n                values: values,\n                tickFormat: (v: string) => v,\n                label: 'GAMMA',\n            },\n        ];\n    }, [dataToggle, width]);\n\n    if (width < 10) return null;\n\n    const scalePadding = 0;\n    const scaleHeight = height / axes.length - scalePadding;\n\n    const yScale = scaleLinear({\n        domain: [100, 0],\n        range: [scaleHeight, 0],\n    });\n\n    return (\n        <>\n            <svg width={outerWidth} height={outerHeight}>\n                <rect\n                    x={0}\n                    y={0}\n                    width={outerWidth}\n                    height={outerHeight}\n                    fill={'url(#visx-axis-gradient)'}\n                    rx={14}\n                />\n                <g transform={`translate(${margin.left},${margin.top})`}>\n                    {axes.map(({ scale, values, label, tickFormat }, i) => (\n                        <g key={`scale-${i}`} transform={`translate(0, ${i * (scaleHeight + scalePadding)})`}>\n                            <AxisComponent\n                                // force remount when this changes to see the animation difference\n                                key={`axis-${animationTrajectory}`}\n                                orientation={orientation === \"bottom\" ? Orientation.bottom : Orientation.left }\n                                top={scaleHeight}\n                                scale={scale}\n                                tickFormat={tickFormat}\n                                stroke={axisColor}\n                                tickStroke={axisColor}\n                                tickLabelProps={() => ({\n                                    dy: dyTickLabel,\n                                    dx: dxTickLabel,\n                                    fill: tickLabelColor,\n                                    fontSize: 14,\n                                    fontFamily: 'sans-serif',\n                                    textAnchor: 'middle',\n                                })}\n                                tickValues={label === 'log' || label === 'time' ? undefined : values}\n                                numTicks={label === 'time' ? 6 : undefined}\n                                label={label}\n                                labelProps={{\n                                    x: width + 30,\n                                    y: -10,\n                                    fill: labelColor,\n                                    fontSize: 18,\n                                    strokeWidth: 0,\n                                    stroke: '#fff',\n                                    paintOrder: 'stroke',\n                                    fontFamily: 'sans-serif',\n                                    textAnchor: 'start',\n                                }}\n                                animationTrajectory={animationTrajectory}\n                            />\n                        </g>\n                    ))}\n                </g>\n            </svg>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}