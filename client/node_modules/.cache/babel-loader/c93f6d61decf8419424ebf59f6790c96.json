{"ast":null,"code":"var _jsxFileName = \"/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/dataset/Datasets.tsx\";\nimport React, { useEffect } from 'react';\nimport FileBrowser from 'react-keyed-file-browser';\nimport Moment from 'moment';\nimport { Icons } from 'react-keyed-file-browser';\nimport '../../styles/Datasets.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { useState } from 'react';\nimport DatasetService from './DatasetService';\nimport loadingAnimation from \"../../styles/loading_graphics.gif\";\nimport FadeIn from 'react-fade-in';\nconst API_URL = \"http://localhost:8080/api\";\n\nfunction Datasets(props) {\n  const [isLoaded, setLoaded] = useState(false);\n  const [files, setFiles] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  useEffect(() => {\n    DatasetService.getFiles().then(res => {\n      const files = [];\n\n      if (res.data) {\n        res.data.forEach(file => {\n          if (file.key.endsWith('/')) {\n            files.push({\n              key: file.key\n            });\n            return;\n          }\n\n          files.push(file);\n        });\n      }\n\n      setFiles(files);\n      setLoaded(true);\n    }, error => {\n      setErrorMessage(error.message);\n      setLoaded(true);\n    });\n  }, []);\n\n  const handleCreateFolder = key => {\n    setLoaded(false);\n    const folder = {\n      key: key\n    };\n    setFiles(folders => [...folders, folder]);\n    DatasetService.createDirectory(folder).then(() => setLoaded(true));\n  };\n\n  const handleCreateFiles = (addedFiles, prefix) => {\n    const newFiles = addedFiles.map(file => {\n      let newKey = prefix;\n\n      if (prefix !== '' && prefix.substring(prefix.length - 1, prefix.length) !== '/') {\n        newKey += '/';\n      }\n\n      newKey += file.name;\n      return {\n        key: newKey,\n        size: file.size,\n        modified: +Moment().unix(),\n        data: file\n      };\n    });\n    const uniqueNewFiles = [];\n    newFiles.map(newFile => {\n      let fileAlreadyExists = false;\n      files.map(existingFile => {\n        if (existingFile.key === newFile.key) {\n          fileAlreadyExists = true;\n        }\n      });\n\n      if (!fileAlreadyExists) {\n        uniqueNewFiles.push(newFile);\n      }\n    });\n    DatasetService.uploadFiles(uniqueNewFiles);\n    setFiles(existingFiles => [...existingFiles, ...uniqueNewFiles]);\n  }; // handleRenameFolder = (oldKey, newKey) =>\n  // {\n  //     this.setState(state =>\n  //     {\n  //         const newFiles = []\n  //         state.files.map((file) =>\n  //         {\n  //             if (file.key.substr(0, oldKey.length) === oldKey)\n  //             {\n  //                 newFiles.push({\n  //                     ...file,\n  //                     key: file.key.replace(oldKey, newKey),\n  //                     modified: +Moment(),\n  //                 })\n  //             } else\n  //             {\n  //                 newFiles.push(file)\n  //             }\n  //         })\n  //         state.files = newFiles\n  //         return state\n  //     })\n  // }\n  // handleRenameFile = (oldKey, newKey) =>\n  // {\n  //     this.setState(state =>\n  //     {\n  //         const newFiles = []\n  //         state.files.map((file) =>\n  //         {\n  //             if (file.key === oldKey)\n  //             {\n  //                 newFiles.push({\n  //                     ...file,\n  //                     key: newKey,\n  //                     modified: +Moment(),\n  //                 })\n  //             } else\n  //             {\n  //                 newFiles.push(file)\n  //             }\n  //         })\n  //         state.files = newFiles\n  //         return state\n  //     })\n  // }\n  // handleDeleteFolder = (folderKey) =>\n  // {\n  //     //TODO Jan: iterate on multiple folderKey\n  //     folderKey = folderKey[0];\n  //     this.setState(state =>\n  //     {\n  //         const newFiles = []\n  //         state.files.map((file) =>\n  //         {\n  //             if (file.key.substr(0, folderKey.length) !== folderKey)\n  //             {\n  //                 newFiles.push(file)\n  //             }\n  //         })\n  //         state.files = newFiles;\n  //         return state;\n  //     })\n  // }\n  // handleDeleteFile = (fileKey) =>\n  // {\n  //     this.setState(state =>\n  //     {\n  //         const newFiles = []\n  //         state.files.map((file) =>\n  //         {\n  //             //TODO Jan: iterate on multiple files\n  //             if (file.key !== fileKey)\n  //             {\n  //                 newFiles.push(file)\n  //             }\n  //         })\n  //         state.files = newFiles;\n  //         return state;\n  //     })\n  // }\n  // handleFileSelection(file)\n  // {\n  //     console.log(file.key);\n  // }\n  // handleNone(fileInformation)\n  // {\n  //     console.log(fileInformation.file);\n  //     return (<div>  Selected file: {fileInformation.file.key} </div>)\n  // }\n\n\n  const handleFolderSelection = folder => {\n    if (props.handleFolderSelection) {\n      props.handleFolderSelection(folder);\n    }\n  };\n\n  if (!isLoaded) {\n    return /*#__PURE__*/React.createElement(FadeIn, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading-animation-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"dataset-loading-animation\",\n      src: loadingAnimation,\n      alt: \"loadingAnimation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 25\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-editor-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FileBrowser, {\n    files: files.map(file => {\n      const modifiedTimeInUnixFormat = file.modified ? file.modified : 0;\n\n      if (modifiedTimeInUnixFormat !== 0) {\n        const modified = Moment.duration(modifiedTimeInUnixFormat * 1000);\n        return {\n          key: file.key,\n          modified: +modified,\n          size: file.size\n        };\n      }\n\n      return {\n        key: file.key\n      };\n    }),\n    icons: Icons.FontAwesome(4),\n    onCreateFolder: handleCreateFolder,\n    onCreateFiles: handleCreateFiles,\n    onSelectFolder: folder => handleFolderSelection(folder) // onMoveFolder={this.handleRenameFolder}\n    // onMoveFile={this.handleRenameFile}\n    // onRenameFolder={this.handleRenameFolder}\n    // onRenameFile={this.handleRenameFile}\n    // onDeleteFolder={this.handleDeleteFolder}\n    // onDeleteFile={(fileKey) => this.handleDeleteFile(fileKey)}\n    // onSelectFile={(file) => this.handleFileSelection(file)}\n    // detailRenderer={(fileInformation) => this.handleNone(fileInformation)}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport default Datasets;","map":{"version":3,"sources":["/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/dataset/Datasets.tsx"],"names":["React","useEffect","FileBrowser","Moment","Icons","useState","DatasetService","loadingAnimation","FadeIn","API_URL","Datasets","props","isLoaded","setLoaded","files","setFiles","errorMessage","setErrorMessage","getFiles","then","res","data","forEach","file","key","endsWith","push","error","message","handleCreateFolder","folder","folders","createDirectory","handleCreateFiles","addedFiles","prefix","newFiles","map","newKey","substring","length","name","size","modified","unix","uniqueNewFiles","newFile","fileAlreadyExists","existingFile","uploadFiles","existingFiles","handleFolderSelection","modifiedTimeInUnixFormat","duration","FontAwesome"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport FileBrowser from 'react-keyed-file-browser';\nimport Moment from 'moment';\nimport { Icons } from 'react-keyed-file-browser';\nimport '../../styles/Datasets.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { useState } from 'react';\nimport axios, { AxiosResponse } from 'axios';\nimport { FileInformation } from '../../types';\nimport DatasetService from './DatasetService';\nimport loadingAnimation from \"../../styles/loading_graphics.gif\";\nimport FadeIn from 'react-fade-in';\n\nconst API_URL = \"http://localhost:8080/api\";\n\nfunction Datasets(props)\n{\n    const [isLoaded, setLoaded] = useState(false);\n    const [files, setFiles] = useState<FileInformation[]>([]);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    useEffect(() =>\n    {\n        DatasetService.getFiles()\n            .then(\n                (res: AxiosResponse<any>) =>\n                {\n                    const files: Array<FileInformation> = [];\n                    if (res.data)\n                    {\n                        res.data.forEach(file =>\n                        {\n                            if (file.key.endsWith('/'))\n                            {\n                                files.push({ key: file.key });\n                                return;\n                            }\n                            files.push(file);\n                        });\n                    }\n                    setFiles(files);\n                    setLoaded(true);\n                },\n                (error) =>\n                {\n                    setErrorMessage(error.message);\n                    setLoaded(true);\n                }\n            )\n    }, [])\n\n    const handleCreateFolder = (key: string) =>\n    {\n        setLoaded(false);\n        const folder: FileInformation = { key: key };\n        setFiles(folders => [...folders, folder]);\n        DatasetService.createDirectory(folder).then(() => setLoaded(true));\n    }\n\n    const handleCreateFiles = (addedFiles: File[], prefix: string) =>\n    {\n        const newFiles: Array<FileInformation> = addedFiles.map((file) =>\n        {\n            let newKey = prefix\n            if (prefix !== '' && prefix.substring(prefix.length - 1, prefix.length) !== '/')\n            {\n                newKey += '/'\n            }\n            newKey += file.name\n            return {\n                key: newKey,\n                size: file.size,\n                modified: +Moment().unix(),\n                data: file\n            }\n        })\n\n        const uniqueNewFiles: Array<FileInformation> = [];\n\n        newFiles.map((newFile) =>\n        {\n            let fileAlreadyExists = false;\n            files.map((existingFile) =>\n            {\n                if (existingFile.key === newFile.key)\n                {\n                    fileAlreadyExists = true;\n                }\n            })\n            if (!fileAlreadyExists)\n            {\n                uniqueNewFiles.push(newFile)\n            }\n        })\n\n        DatasetService.uploadFiles(uniqueNewFiles);\n\n        setFiles(existingFiles => [...existingFiles, ...uniqueNewFiles]);\n    }\n\n    // handleRenameFolder = (oldKey, newKey) =>\n    // {\n    //     this.setState(state =>\n    //     {\n    //         const newFiles = []\n    //         state.files.map((file) =>\n    //         {\n    //             if (file.key.substr(0, oldKey.length) === oldKey)\n    //             {\n    //                 newFiles.push({\n    //                     ...file,\n    //                     key: file.key.replace(oldKey, newKey),\n    //                     modified: +Moment(),\n    //                 })\n    //             } else\n    //             {\n    //                 newFiles.push(file)\n    //             }\n    //         })\n    //         state.files = newFiles\n    //         return state\n    //     })\n    // }\n    // handleRenameFile = (oldKey, newKey) =>\n    // {\n    //     this.setState(state =>\n    //     {\n    //         const newFiles = []\n    //         state.files.map((file) =>\n    //         {\n    //             if (file.key === oldKey)\n    //             {\n    //                 newFiles.push({\n    //                     ...file,\n    //                     key: newKey,\n    //                     modified: +Moment(),\n    //                 })\n    //             } else\n    //             {\n    //                 newFiles.push(file)\n    //             }\n    //         })\n    //         state.files = newFiles\n    //         return state\n    //     })\n    // }\n\n    // handleDeleteFolder = (folderKey) =>\n    // {\n    //     //TODO Jan: iterate on multiple folderKey\n    //     folderKey = folderKey[0];\n    //     this.setState(state =>\n    //     {\n    //         const newFiles = []\n    //         state.files.map((file) =>\n    //         {\n    //             if (file.key.substr(0, folderKey.length) !== folderKey)\n    //             {\n    //                 newFiles.push(file)\n    //             }\n    //         })\n    //         state.files = newFiles;\n    //         return state;\n    //     })\n    // }\n    // handleDeleteFile = (fileKey) =>\n    // {\n    //     this.setState(state =>\n    //     {\n    //         const newFiles = []\n    //         state.files.map((file) =>\n    //         {\n    //             //TODO Jan: iterate on multiple files\n    //             if (file.key !== fileKey)\n    //             {\n    //                 newFiles.push(file)\n    //             }\n    //         })\n    //         state.files = newFiles;\n    //         return state;\n    //     })\n    // }\n\n    // handleFileSelection(file)\n    // {\n    //     console.log(file.key);\n    // }\n\n    // handleNone(fileInformation)\n    // {\n    //     console.log(fileInformation.file);\n    //     return (<div>  Selected file: {fileInformation.file.key} </div>)\n    // }\n\n    const handleFolderSelection = (folder) =>\n    {\n        if (props.handleFolderSelection)\n        {\n            props.handleFolderSelection(folder)\n        }\n    }\n\n    if (!isLoaded)\n    {\n        return <FadeIn>\n                    <div className='loading-animation-wrapper'>\n                        <img className='dataset-loading-animation' src={loadingAnimation} alt=\"loadingAnimation\" />\n                    </div>\n               </FadeIn>;\n    }\n    return (\n        <div>\n            <div className=\"file-editor-wrapper\">\n                <FileBrowser\n                    files={files.map(file => \n                    {\n                        const modifiedTimeInUnixFormat = file.modified ? file.modified : 0;\n                        if (modifiedTimeInUnixFormat !== 0)\n                        {\n                            const modified = Moment.duration(modifiedTimeInUnixFormat * 1000);\n                            return ({\n                                key: file.key,\n                                modified: +modified,\n                                size: file.size\n                            })\n                        }\n                        return ({\n                            key: file.key\n                        })\n                    })}\n                    icons={Icons.FontAwesome(4)}\n\n                    onCreateFolder={handleCreateFolder}\n                    onCreateFiles={handleCreateFiles}\n                    onSelectFolder={(folder) => handleFolderSelection(folder)}\n                // onMoveFolder={this.handleRenameFolder}\n                // onMoveFile={this.handleRenameFile}\n                // onRenameFolder={this.handleRenameFolder}\n                // onRenameFile={this.handleRenameFile}\n                // onDeleteFolder={this.handleDeleteFolder}\n                // onDeleteFile={(fileKey) => this.handleDeleteFile(fileKey)}\n                // onSelectFile={(file) => this.handleFileSelection(file)}\n                // detailRenderer={(fileInformation) => this.handleNone(fileInformation)}\n                />\n\n            </div>\n        </div >\n    )\n}\n\nexport default Datasets;"]},"metadata":{},"sourceType":"module"}