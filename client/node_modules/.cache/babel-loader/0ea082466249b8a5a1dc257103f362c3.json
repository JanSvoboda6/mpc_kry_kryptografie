{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = genBin;\n\nvar defaultCount = function defaultCount(idx, number) {\n  return Math.random() * (25 * (number - idx));\n};\n\nvar defaultBin = function defaultBin(idx, length) {\n  return idx * 150;\n};\n\nfunction genBin(length, bin, count) {\n  if (bin === void 0) {\n    bin = defaultBin;\n  }\n\n  if (count === void 0) {\n    count = defaultCount;\n  }\n\n  return new Array(length).fill(1).reduce(function (data, d, i) {\n    return data.concat([{\n      bin: bin(i, length),\n      count: count(i, length)\n    }]);\n  }, []);\n}","map":{"version":3,"sources":["/Users/jan/dev/thesis/ml_runner/react/ml-runner/node_modules/@visx/mock-data/lib/generators/genBin.js"],"names":["exports","__esModule","default","genBin","defaultCount","idx","number","Math","random","defaultBin","length","bin","count","Array","fill","reduce","data","d","i","concat"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkBC,MAAlB;;AAEA,IAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,GAAtB,EAA2BC,MAA3B,EAAmC;AACpD,SAAOC,IAAI,CAACC,MAAL,MAAiB,MAAMF,MAAM,GAAGD,GAAf,CAAjB,CAAP;AACD,CAFD;;AAIA,IAAII,UAAU,GAAG,SAASA,UAAT,CAAoBJ,GAApB,EAAyBK,MAAzB,EAAiC;AAChD,SAAOL,GAAG,GAAG,GAAb;AACD,CAFD;;AAIA,SAASF,MAAT,CAAgBO,MAAhB,EAAwBC,GAAxB,EAA6BC,KAA7B,EAAoC;AAClC,MAAID,GAAG,KAAK,KAAK,CAAjB,EAAoB;AAClBA,IAAAA,GAAG,GAAGF,UAAN;AACD;;AAED,MAAIG,KAAK,KAAK,KAAK,CAAnB,EAAsB;AACpBA,IAAAA,KAAK,GAAGR,YAAR;AACD;;AAED,SAAO,IAAIS,KAAJ,CAAUH,MAAV,EAAkBI,IAAlB,CAAuB,CAAvB,EAA0BC,MAA1B,CAAiC,UAAUC,IAAV,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AAC5D,WAAOF,IAAI,CAACG,MAAL,CAAY,CAAC;AAClBR,MAAAA,GAAG,EAAEA,GAAG,CAACO,CAAD,EAAIR,MAAJ,CADU;AAElBE,MAAAA,KAAK,EAAEA,KAAK,CAACM,CAAD,EAAIR,MAAJ;AAFM,KAAD,CAAZ,CAAP;AAID,GALM,EAKJ,EALI,CAAP;AAMD","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = genBin;\n\nvar defaultCount = function defaultCount(idx, number) {\n  return Math.random() * (25 * (number - idx));\n};\n\nvar defaultBin = function defaultBin(idx, length) {\n  return idx * 150;\n};\n\nfunction genBin(length, bin, count) {\n  if (bin === void 0) {\n    bin = defaultBin;\n  }\n\n  if (count === void 0) {\n    count = defaultCount;\n  }\n\n  return new Array(length).fill(1).reduce(function (data, d, i) {\n    return data.concat([{\n      bin: bin(i, length),\n      count: count(i, length)\n    }]);\n  }, []);\n}"]},"metadata":{},"sourceType":"script"}