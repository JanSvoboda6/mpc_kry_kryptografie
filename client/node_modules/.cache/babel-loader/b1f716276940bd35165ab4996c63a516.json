{"ast":null,"code":"var _jsxFileName = \"/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/dataset/Datasets.tsx\";\nimport React, { useEffect } from 'react';\nimport FileBrowser from 'react-keyed-file-browser';\nimport Moment from 'moment';\nimport { Icons } from 'react-keyed-file-browser';\nimport '../../styles/Datasets.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { useState } from 'react';\nimport DatasetService from './DatasetService';\nimport loadingAnimation from \"../../styles/loading_graphics.gif\";\nimport FadeIn from 'react-fade-in';\nimport DatasetUtility from \"./DatasetUtility\";\nconst API_URL = \"http://localhost:8080/api\";\n\nfunction Datasets(props) {\n  const [isLoaded, setLoaded] = useState(false);\n  const [files, setFiles] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  useEffect(() => {\n    DatasetService.getFiles().then(res => {\n      const files = [];\n\n      if (res.data) {\n        res.data.forEach(file => {\n          if (file.key.endsWith('/')) {\n            files.push({\n              key: file.key\n            });\n            return;\n          }\n\n          files.push(file);\n        });\n      }\n\n      setFiles(files);\n      setLoaded(true);\n    }, error => {\n      setErrorMessage(error.message);\n      setLoaded(true);\n    });\n  }, []);\n\n  const handleCreateFolder = key => {\n    setLoaded(false);\n    const folder = {\n      key: key\n    };\n    setFiles(folders => [...folders, folder]);\n    DatasetService.createDirectory(folder).then(() => setLoaded(true));\n  };\n\n  const handleCreateFiles = (addedFiles, prefix) => {\n    const uniqueAddedFiles = DatasetUtility.getUniqueAddedFiles(files, addedFiles, prefix);\n    DatasetService.uploadFiles(uniqueAddedFiles);\n    setFiles(existingFiles => [...existingFiles, ...uniqueAddedFiles]);\n  };\n\n  const handleDeleteFolder = folderKeys => {\n    setFiles(DatasetUtility.deleteSelectedFolders(files, folderKeys));\n  }; // handleRenameFolder = (oldKey, newKey) =>\n  // {\n  //     this.setState(state =>\n  //     {\n  //         const newFiles = []\n  //         state.files.map((file) =>\n  //         {\n  //             if (file.key.substr(0, oldKey.length) === oldKey)\n  //             {\n  //                 newFiles.push({\n  //                     ...file,\n  //                     key: file.key.replace(oldKey, newKey),\n  //                     modified: +Moment(),\n  //                 })\n  //             } else\n  //             {\n  //                 newFiles.push(file)\n  //             }\n  //         })\n  //         state.files = newFiles\n  //         return state\n  //     })\n  // }\n  // handleRenameFile = (oldKey, newKey) =>\n  // {\n  //     this.setState(state =>\n  //     {\n  //         const newFiles = []\n  //         state.files.map((file) =>\n  //         {\n  //             if (file.key === oldKey)\n  //             {\n  //                 newFiles.push({\n  //                     ...file,\n  //                     key: newKey,\n  //                     modified: +Moment(),\n  //                 })\n  //             } else\n  //             {\n  //                 newFiles.push(file)\n  //             }\n  //         })\n  //         state.files = newFiles\n  //         return state\n  //     })\n  // }\n  // handleDeleteFile = (fileKey) =>\n  // {\n  //     this.setState(state =>\n  //     {\n  //         const newFiles = []\n  //         state.files.map((file) =>\n  //         {\n  //             //TODO Jan: iterate on multiple files\n  //             if (file.key !== fileKey)\n  //             {\n  //                 newFiles.push(file)\n  //             }\n  //         })\n  //         state.files = newFiles;\n  //         return state;\n  //     })\n  // }\n  // handleFileSelection(file)\n  // {\n  //     console.log(file.key);\n  // }\n  // handleNone(fileInformation)\n  // {\n  //     console.log(fileInformation.file);\n  //     return (<div>  Selected file: {fileInformation.file.key} </div>)\n  // }\n\n\n  const handleFolderSelection = folder => {\n    if (props.handleFolderSelection) {\n      props.handleFolderSelection(folder);\n    }\n  };\n\n  if (!isLoaded) {\n    return /*#__PURE__*/React.createElement(FadeIn, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading-animation-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"dataset-loading-animation\",\n      src: loadingAnimation,\n      alt: \"loadingAnimation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 25\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FadeIn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-editor-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FileBrowser, {\n    files: files.map(file => {\n      const modifiedTimeInUnixFormat = file.modified ? file.modified : 0;\n\n      if (modifiedTimeInUnixFormat !== 0) {\n        const modified = Moment.duration(modifiedTimeInUnixFormat * 1000);\n        return {\n          key: file.key,\n          modified: +modified,\n          size: file.size\n        };\n      }\n\n      return {\n        key: file.key\n      };\n    }),\n    icons: Icons.FontAwesome(4),\n    onCreateFolder: handleCreateFolder,\n    onCreateFiles: handleCreateFiles,\n    onSelectFolder: folder => handleFolderSelection(folder) // onMoveFolder={this.handleRenameFolder}\n    // onMoveFile={this.handleRenameFile}\n    // onRenameFolder={this.handleRenameFolder}\n    // onRenameFile={this.handleRenameFile}\n    ,\n    onDeleteFolder: handleDeleteFolder // onDeleteFile={(fileKey) => this.handleDeleteFile(fileKey)}\n    // onSelectFile={(file) => this.handleFileSelection(file)}\n    // detailRenderer={(fileInformation) => this.handleNone(fileInformation)}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 21\n    }\n  }))));\n}\n\nexport default Datasets;","map":{"version":3,"sources":["/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/dataset/Datasets.tsx"],"names":["React","useEffect","FileBrowser","Moment","Icons","useState","DatasetService","loadingAnimation","FadeIn","DatasetUtility","API_URL","Datasets","props","isLoaded","setLoaded","files","setFiles","errorMessage","setErrorMessage","getFiles","then","res","data","forEach","file","key","endsWith","push","error","message","handleCreateFolder","folder","folders","createDirectory","handleCreateFiles","addedFiles","prefix","uniqueAddedFiles","getUniqueAddedFiles","uploadFiles","existingFiles","handleDeleteFolder","folderKeys","deleteSelectedFolders","handleFolderSelection","map","modifiedTimeInUnixFormat","modified","duration","size","FontAwesome"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport FileBrowser from 'react-keyed-file-browser';\nimport Moment from 'moment';\nimport { Icons } from 'react-keyed-file-browser';\nimport '../../styles/Datasets.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { useState } from 'react';\nimport axios, { AxiosResponse } from 'axios';\nimport { FileInformation } from '../../types';\nimport DatasetService from './DatasetService';\nimport loadingAnimation from \"../../styles/loading_graphics.gif\";\nimport FadeIn from 'react-fade-in';\nimport DatasetUtility from \"./DatasetUtility\";\n\n\nconst API_URL = \"http://localhost:8080/api\";\n\nfunction Datasets(props)\n{\n    const [isLoaded, setLoaded] = useState(false);\n    const [files, setFiles] = useState<FileInformation[]>([]);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    useEffect(() =>\n    {\n        DatasetService.getFiles()\n            .then(\n                (res: AxiosResponse<any>) =>\n                {\n                    const files: Array<FileInformation> = [];\n                    if (res.data)\n                    {\n                        res.data.forEach(file =>\n                        {\n                            if (file.key.endsWith('/'))\n                            {\n                                files.push({ key: file.key });\n                                return;\n                            }\n                            files.push(file);\n                        });\n                    }\n                    setFiles(files);\n                    setLoaded(true);\n                },\n                (error) =>\n                {\n                    setErrorMessage(error.message);\n                    setLoaded(true);\n                }\n            )\n    }, [])\n\n    const handleCreateFolder = (key: string) =>\n    {\n        setLoaded(false);\n        const folder: FileInformation = { key: key };\n        setFiles(folders => [...folders, folder]);\n        DatasetService.createDirectory(folder).then(() => setLoaded(true));\n    }\n\n    const handleCreateFiles = (addedFiles: File[], prefix: string) =>\n    {\n        const uniqueAddedFiles: FileInformation[] = DatasetUtility.getUniqueAddedFiles(files, addedFiles, prefix);\n        DatasetService.uploadFiles(uniqueAddedFiles);\n        setFiles(existingFiles => [...existingFiles, ...uniqueAddedFiles]);\n    }\n\n    const handleDeleteFolder = (folderKeys: string[]) =>\n    {\n        setFiles(DatasetUtility.deleteSelectedFolders(files, folderKeys));\n    }\n\n    // handleRenameFolder = (oldKey, newKey) =>\n    // {\n    //     this.setState(state =>\n    //     {\n    //         const newFiles = []\n    //         state.files.map((file) =>\n    //         {\n    //             if (file.key.substr(0, oldKey.length) === oldKey)\n    //             {\n    //                 newFiles.push({\n    //                     ...file,\n    //                     key: file.key.replace(oldKey, newKey),\n    //                     modified: +Moment(),\n    //                 })\n    //             } else\n    //             {\n    //                 newFiles.push(file)\n    //             }\n    //         })\n    //         state.files = newFiles\n    //         return state\n    //     })\n    // }\n    // handleRenameFile = (oldKey, newKey) =>\n    // {\n    //     this.setState(state =>\n    //     {\n    //         const newFiles = []\n    //         state.files.map((file) =>\n    //         {\n    //             if (file.key === oldKey)\n    //             {\n    //                 newFiles.push({\n    //                     ...file,\n    //                     key: newKey,\n    //                     modified: +Moment(),\n    //                 })\n    //             } else\n    //             {\n    //                 newFiles.push(file)\n    //             }\n    //         })\n    //         state.files = newFiles\n    //         return state\n    //     })\n    // }\n\n    // handleDeleteFile = (fileKey) =>\n    // {\n    //     this.setState(state =>\n    //     {\n    //         const newFiles = []\n    //         state.files.map((file) =>\n    //         {\n    //             //TODO Jan: iterate on multiple files\n    //             if (file.key !== fileKey)\n    //             {\n    //                 newFiles.push(file)\n    //             }\n    //         })\n    //         state.files = newFiles;\n    //         return state;\n    //     })\n    // }\n\n    // handleFileSelection(file)\n    // {\n    //     console.log(file.key);\n    // }\n\n    // handleNone(fileInformation)\n    // {\n    //     console.log(fileInformation.file);\n    //     return (<div>  Selected file: {fileInformation.file.key} </div>)\n    // }\n\n    const handleFolderSelection = (folder) =>\n    {\n        if (props.handleFolderSelection)\n        {\n            props.handleFolderSelection(folder)\n        }\n    }\n\n    if (!isLoaded)\n    {\n        return <FadeIn>\n                    <div className='loading-animation-wrapper'>\n                        <img className='dataset-loading-animation' src={loadingAnimation} alt=\"loadingAnimation\" />\n                    </div>\n               </FadeIn>\n    }\n    return (\n        <div>\n            <FadeIn>\n                <div className=\"file-editor-wrapper\">\n                    <FileBrowser\n                        files={files.map(file =>\n                        {\n                            const modifiedTimeInUnixFormat = file.modified ? file.modified : 0;\n                            if (modifiedTimeInUnixFormat !== 0)\n                            {\n                                const modified = Moment.duration(modifiedTimeInUnixFormat * 1000);\n                                return ({\n                                    key: file.key,\n                                    modified: +modified,\n                                    size: file.size\n                                })\n                            }\n                            return ({\n                                key: file.key\n                            })\n                        })}\n                        icons={Icons.FontAwesome(4)}\n\n                        onCreateFolder={handleCreateFolder}\n                        onCreateFiles={handleCreateFiles}\n                        onSelectFolder={(folder) => handleFolderSelection(folder)}\n                    // onMoveFolder={this.handleRenameFolder}\n                    // onMoveFile={this.handleRenameFile}\n                    // onRenameFolder={this.handleRenameFolder}\n                    // onRenameFile={this.handleRenameFile}\n                        onDeleteFolder={handleDeleteFolder}\n                    // onDeleteFile={(fileKey) => this.handleDeleteFile(fileKey)}\n                    // onSelectFile={(file) => this.handleFileSelection(file)}\n                    // detailRenderer={(fileInformation) => this.handleNone(fileInformation)}\n                />\n\n                </div>\n            </FadeIn>\n        </div >\n    )\n}\n\nexport default Datasets;"]},"metadata":{},"sourceType":"module"}