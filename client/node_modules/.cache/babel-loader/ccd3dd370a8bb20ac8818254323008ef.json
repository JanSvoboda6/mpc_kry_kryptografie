{"ast":null,"code":"var _jsxFileName = \"/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/dataset/Datasets.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport FileBrowser, { Icons } from 'react-keyed-file-browser';\nimport Moment from 'moment';\nimport '../../styles/Datasets.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport DatasetService from './DatasetService';\nimport loadingAnimation from \"../../styles/loading_graphics.gif\";\nimport FadeIn from 'react-fade-in';\nimport DatasetUtility from \"./DatasetUtility\";\n\nfunction Datasets(props) {\n  const [isLoaded, setLoaded] = useState(false);\n  const [files, setFiles] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  useEffect(() => {\n    DatasetService.getFiles().then(res => {\n      const files = [];\n\n      if (res.data) {\n        res.data.forEach(file => {\n          if (file.key.endsWith('/')) {\n            files.push({\n              key: file.key\n            });\n            return;\n          }\n\n          files.push(file);\n        });\n      }\n\n      setFiles(files);\n      setLoaded(true);\n    }, error => {\n      setErrorMessage(error.message);\n      setLoaded(true);\n    });\n  }, []);\n\n  const handleCreateFolder = key => {\n    setLoaded(false);\n    const folder = {\n      key: key\n    };\n    setFiles(folders => [...folders, folder]);\n    DatasetService.createDirectory(folder).then(() => setLoaded(true));\n  };\n\n  const handleCreateFiles = (addedFiles, prefix) => {\n    const uniqueAddedFiles = DatasetUtility.getUniqueAddedFiles(files, addedFiles, prefix);\n    DatasetService.uploadFiles(uniqueAddedFiles).then(() => setFiles(existingFiles => [...existingFiles, ...uniqueAddedFiles]));\n  };\n\n  const handleDeleteFolders = folderKeys => {\n    DatasetService.deleteFolders(folderKeys).then(() => {\n      setFiles(DatasetUtility.deleteSelectedFolders(files, folderKeys));\n    });\n  };\n\n  const handleDeleteFiles = fileKeys => {\n    DatasetService.deleteFiles(fileKeys).then(() => {\n      setFiles(DatasetUtility.deleteSelectedFiles(files, fileKeys));\n    });\n  };\n\n  const handleRenameFile = (oldKey, newKey) => {\n    setFiles(DatasetUtility.renameFile(files, oldKey, newKey));\n  };\n\n  const handleRenameFolder = (oldKey, newKey) => {\n    setFiles(DatasetUtility.renameFolder(files, oldKey, newKey));\n  };\n\n  const handleDownloadFile = keys => {\n    console.log(keys);\n  };\n\n  const handleDownloadFolder = keys => {\n    console.log(keys);\n  };\n\n  const handleFolderSelection = folder => {\n    if (props.handleFolderSelection) {\n      props.handleFolderSelection(folder);\n    }\n  };\n\n  if (!isLoaded) {\n    return /*#__PURE__*/React.createElement(FadeIn, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading-animation-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"dataset-loading-animation\",\n      src: loadingAnimation,\n      alt: \"loadingAnimation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FadeIn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-editor-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FileBrowser, {\n    files: files.map(file => {\n      const modifiedTimeInUnixFormat = file.modified ? file.modified : 0;\n\n      if (modifiedTimeInUnixFormat !== 0) {\n        const modified = Moment.duration(modifiedTimeInUnixFormat * 1000);\n        return {\n          key: file.key,\n          modified: +modified,\n          size: file.size\n        };\n      }\n\n      return {\n        key: file.key\n      };\n    }),\n    icons: Icons.FontAwesome(4),\n    onCreateFolder: handleCreateFolder,\n    onCreateFiles: handleCreateFiles,\n    onSelectFolder: folder => handleFolderSelection(folder),\n    onMoveFolder: (oldKey, newKey) => handleRenameFolder(oldKey, newKey),\n    onMoveFile: (oldKey, newKey) => handleRenameFile(oldKey, newKey),\n    onRenameFolder: (oldKey, newKey) => handleRenameFolder(oldKey, newKey),\n    onRenameFile: (oldKey, newKey) => handleRenameFile(oldKey, newKey),\n    onDeleteFolder: handleDeleteFolders,\n    onDeleteFile: handleDeleteFiles,\n    onDownloadFile: handleDownloadFile,\n    onDownloadFolder: handleDownloadFolder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }))));\n}\n\nexport default Datasets;","map":{"version":3,"sources":["/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/dataset/Datasets.tsx"],"names":["React","useEffect","useState","FileBrowser","Icons","Moment","DatasetService","loadingAnimation","FadeIn","DatasetUtility","Datasets","props","isLoaded","setLoaded","files","setFiles","errorMessage","setErrorMessage","getFiles","then","res","data","forEach","file","key","endsWith","push","error","message","handleCreateFolder","folder","folders","createDirectory","handleCreateFiles","addedFiles","prefix","uniqueAddedFiles","getUniqueAddedFiles","uploadFiles","existingFiles","handleDeleteFolders","folderKeys","deleteFolders","deleteSelectedFolders","handleDeleteFiles","fileKeys","deleteFiles","deleteSelectedFiles","handleRenameFile","oldKey","newKey","renameFile","handleRenameFolder","renameFolder","handleDownloadFile","keys","console","log","handleDownloadFolder","handleFolderSelection","map","modifiedTimeInUnixFormat","modified","duration","size","FontAwesome"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport FileBrowser, {Icons} from 'react-keyed-file-browser';\nimport Moment from 'moment';\nimport '../../styles/Datasets.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport {AxiosResponse} from 'axios';\nimport {FileInformation} from '../../types';\nimport DatasetService from './DatasetService';\nimport loadingAnimation from \"../../styles/loading_graphics.gif\";\nimport FadeIn from 'react-fade-in';\nimport DatasetUtility from \"./DatasetUtility\";\n\nfunction Datasets(props)\n{\n    const [isLoaded, setLoaded] = useState(false);\n    const [files, setFiles] = useState<FileInformation[]>([]);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    useEffect(() =>\n    {\n        DatasetService.getFiles()\n            .then(\n                (res: AxiosResponse<any>) =>\n                {\n                    const files: Array<FileInformation> = [];\n                    if (res.data)\n                    {\n                        res.data.forEach(file =>\n                        {\n                            if (file.key.endsWith('/'))\n                            {\n                                files.push({key: file.key});\n                                return;\n                            }\n                            files.push(file);\n                        });\n                    }\n                    setFiles(files);\n                    setLoaded(true);\n                },\n                (error) =>\n                {\n                    setErrorMessage(error.message);\n                    setLoaded(true);\n                }\n            )\n    }, [])\n\n    const handleCreateFolder = (key: string) =>\n    {\n        setLoaded(false);\n        const folder: FileInformation = {key: key};\n        setFiles(folders => [...folders, folder]);\n        DatasetService.createDirectory(folder).then(() => setLoaded(true));\n    }\n\n    const handleCreateFiles = (addedFiles: File[], prefix: string) =>\n    {\n        const uniqueAddedFiles: FileInformation[] = DatasetUtility.getUniqueAddedFiles(files, addedFiles, prefix);\n        DatasetService.uploadFiles(uniqueAddedFiles).then(() => setFiles(existingFiles => [...existingFiles, ...uniqueAddedFiles]));\n    }\n\n    const handleDeleteFolders = (folderKeys: string[]) =>\n    {\n        DatasetService.deleteFolders(folderKeys).then( () => {\n            setFiles(DatasetUtility.deleteSelectedFolders(files, folderKeys));\n        });\n    }\n\n    const handleDeleteFiles = (fileKeys: string[]) =>\n    {\n        DatasetService.deleteFiles(fileKeys).then( () => {\n            setFiles(DatasetUtility.deleteSelectedFiles(files, fileKeys));\n        });\n    }\n\n    const handleRenameFile = (oldKey: string, newKey: string) =>\n    {\n        setFiles(DatasetUtility.renameFile(files, oldKey, newKey));\n    }\n\n    const handleRenameFolder = (oldKey: string, newKey: string) =>\n    {\n        setFiles(DatasetUtility.renameFolder(files, oldKey, newKey));\n    }\n\n    const handleDownloadFile = (keys: string[]) => {\n        console.log(keys);\n    }\n\n    const handleDownloadFolder = (keys: string[]) => {\n        console.log(keys);\n    }\n\n    const handleFolderSelection = (folder) =>\n    {\n        if (props.handleFolderSelection)\n        {\n            props.handleFolderSelection(folder)\n        }\n    }\n\n    if (!isLoaded)\n    {\n        return <FadeIn>\n            <div className='loading-animation-wrapper'>\n                <img className='dataset-loading-animation' src={loadingAnimation} alt=\"loadingAnimation\"/>\n            </div>\n        </FadeIn>\n    }\n    return (\n        <div>\n            <FadeIn>\n                <div className=\"file-editor-wrapper\">\n                    <FileBrowser\n                        files={files.map(file =>\n                        {\n                            const modifiedTimeInUnixFormat = file.modified ? file.modified : 0;\n                            if (modifiedTimeInUnixFormat !== 0)\n                            {\n                                const modified = Moment.duration(modifiedTimeInUnixFormat * 1000);\n                                return ({\n                                    key: file.key,\n                                    modified: +modified,\n                                    size: file.size\n                                })\n                            }\n                            return ({\n                                key: file.key\n                            })\n                        })}\n                        icons={Icons.FontAwesome(4)}\n\n                        onCreateFolder={handleCreateFolder}\n                        onCreateFiles={handleCreateFiles}\n                        onSelectFolder={(folder) => handleFolderSelection(folder)}\n                        onMoveFolder={(oldKey, newKey) => handleRenameFolder(oldKey, newKey)}\n                        onMoveFile={(oldKey, newKey) => handleRenameFile(oldKey, newKey)}\n                        onRenameFolder={(oldKey, newKey) => handleRenameFolder(oldKey, newKey)}\n                        onRenameFile={(oldKey, newKey) => handleRenameFile(oldKey, newKey)}\n                        onDeleteFolder={handleDeleteFolders}\n                        onDeleteFile={handleDeleteFiles}\n                        onDownloadFile={handleDownloadFile}\n                        onDownloadFolder={handleDownloadFolder}\n                    />\n                </div>\n            </FadeIn>\n        </div>\n    )\n}\n\nexport default Datasets;"]},"metadata":{},"sourceType":"module"}