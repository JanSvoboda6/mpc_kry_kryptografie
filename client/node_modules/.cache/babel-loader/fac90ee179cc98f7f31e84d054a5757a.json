{"ast":null,"code":"var _jsxFileName = \"/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/visualization/Heatmap.tsx\";\nimport React, { useState } from 'react';\nimport genBins from '@visx/mock-data/lib/generators/genBins';\nimport { scaleLinear } from '@visx/scale';\nimport { HeatmapRect } from '@visx/heatmap';\nimport DefaultAxis from '../analysis/DefaultAxis';\n// const hot1 = '#77312f';\n// const hot2 = '#f33d15';\nconst hot1 = '#122549';\nconst hot2 = '#b4fbde';\nexport const background = '#221c1c';\nconst binData = genBins(\n/* length = */\n7,\n/* height = */\n7);\n\nfunction max(data, value) {\n  return Math.max(...data.map(value));\n}\n\nfunction min(data, value) {\n  return Math.min(...data.map(value));\n}\n\nconst bins = d => d.bins;\n\nconst count = d => d.count;\n\nconst colorMax = max(binData, d => max(bins(d), count));\nconst bucketSizeMax = max(binData, d => bins(d).length);\nconst xScale = scaleLinear({\n  domain: [0, binData.length]\n});\nconst yScale = scaleLinear({\n  domain: [0, bucketSizeMax]\n});\nconst circleColorScale = scaleLinear({\n  range: [hot1, hot2],\n  domain: [0, colorMax]\n});\nconst rectColorScale = scaleLinear({\n  range: [hot1, hot2],\n  domain: [0, colorMax]\n});\nconst opacityScale = scaleLinear({\n  range: [1, 1],\n  domain: [0, colorMax]\n});\nconst defaultMargin = {\n  top: 100,\n  left: 50,\n  right: 50,\n  bottom: 50\n};\nexport default (_ref => {\n  let {\n    width,\n    height,\n    events = false,\n    margin = defaultMargin,\n    separation = 50\n  } = _ref;\n  const [valueOfSelectedBin, setValueOfSelectedBin] = useState(0);\n\n  const onBinClick = bin => {\n    console.log(bin.bin.count);\n    setValueOfSelectedBin(bin.bin.count);\n  }; // bounds\n\n\n  const size = width > margin.left + margin.right ? width - margin.left - margin.right - separation : width;\n  const xMax = size / 2;\n  const yMax = height - margin.bottom - margin.top;\n  const binWidth = xMax / binData.length;\n  const binHeight = yMax / bucketSizeMax;\n  const radius = min([binWidth, binHeight], d => d) / 2;\n  xScale.range([0, xMax]);\n  yScale.range([yMax, 0]);\n  return width < 10 ? null : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"heatmap-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"selected-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, \"Selected Value: \", valueOfSelectedBin.toFixed(3), \"%\"), /*#__PURE__*/React.createElement(\"svg\", {\n    width: width / 2,\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    transform: `translate(${margin.left + 30},${margin.top - 150})`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(HeatmapRect, {\n    data: binData,\n    xScale: xScale,\n    yScale: yScale,\n    colorScale: rectColorScale,\n    opacityScale: opacityScale,\n    binWidth: binWidth,\n    binHeight: binWidth,\n    gap: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, heatmap => heatmap.map(heatmapBins => heatmapBins.map(bin => /*#__PURE__*/React.createElement(\"rect\", {\n    key: `heatmap-rect-${bin.row}-${bin.column}`,\n    className: \"vx-heatmap-rect heatmap-bin\",\n    width: bin.width,\n    height: bin.height,\n    x: bin.x,\n    y: bin.y,\n    fill: bin.color,\n    fillOpacity: bin.opacity,\n    onClick: () => {\n      //if (!events) return;\n      const {\n        row,\n        column\n      } = bin;\n\n      if (bin.bin) {\n        onBinClick(bin);\n      }\n\n      console.log(JSON.stringify({\n        row,\n        column,\n        bin: bin.bin\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 33\n    }\n  }))))), /*#__PURE__*/React.createElement(\"g\", {\n    transform: 'translate(21, -110)',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DefaultAxis, {\n    width: width / 2.25,\n    height: height,\n    values: [0.001, 0.01, 0.1, 1, 10, 100, 1000].reverse(),\n    orientation: \"left\",\n    margin: {\n      top: 30,\n      right: 25,\n      bottom: 350,\n      left: 50\n    },\n    dyTickLabel: \"0.3em\",\n    dxTickLabel: \"-1.5em\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    transform: 'translate(50, -113)',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DefaultAxis, {\n    width: width / 2.2,\n    height: height,\n    values: [0.001, 0.01, 0.1, 1, 10, 100, 1000],\n    orientation: \"bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }))));\n});","map":{"version":3,"sources":["/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/visualization/Heatmap.tsx"],"names":["React","useState","genBins","scaleLinear","HeatmapRect","DefaultAxis","hot1","hot2","background","binData","max","data","value","Math","map","min","bins","d","count","colorMax","bucketSizeMax","length","xScale","domain","yScale","circleColorScale","range","rectColorScale","opacityScale","defaultMargin","top","left","right","bottom","width","height","events","margin","separation","valueOfSelectedBin","setValueOfSelectedBin","onBinClick","bin","console","log","size","xMax","yMax","binWidth","binHeight","radius","toFixed","heatmap","heatmapBins","row","column","x","y","color","opacity","JSON","stringify","reverse"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Group } from '@visx/group';\nimport genBins, { Bin, Bins } from '@visx/mock-data/lib/generators/genBins';\nimport { scaleLinear } from '@visx/scale';\nimport { HeatmapCircle, HeatmapRect } from '@visx/heatmap';\nimport { getSeededRandom } from '@visx/mock-data';\nimport { Axis } from '@visx/axis';\nimport DefaultAxis from '../analysis/DefaultAxis';\nimport { FunctionTypeNode } from 'typescript';\n\n\n// const hot1 = '#77312f';\n// const hot2 = '#f33d15';\nconst hot1 = '#122549';\nconst hot2 = '#b4fbde';\nexport const background = '#221c1c';\n\nconst binData = genBins(/* length = */ 7, /* height = */ 7);\n\nfunction max<Datum>(data: Datum[], value: (d: Datum) => number): number\n{\n    return Math.max(...data.map(value));\n}\n\nfunction min<Datum>(data: Datum[], value: (d: Datum) => number): number\n{\n    return Math.min(...data.map(value));\n}\n\nconst bins = (d: Bins) => d.bins;\nconst count = (d: Bin) => d.count;\n\nconst colorMax = max(binData, d => max(bins(d), count));\nconst bucketSizeMax = max(binData, d => bins(d).length);\n\nconst xScale = scaleLinear < number > ({\n    domain: [0, binData.length],\n});\nconst yScale = scaleLinear < number > ({\n    domain: [0, bucketSizeMax],\n});\nconst circleColorScale = scaleLinear < string > ({\n    range: [hot1, hot2],\n    domain: [0, colorMax],\n});\nconst rectColorScale = scaleLinear < string > ({\n    range: [hot1, hot2],\n    domain: [0, colorMax],\n});\nconst opacityScale = scaleLinear < number > ({\n    range: [1, 1],\n    domain: [0, colorMax],\n});\n\nexport type HeatmapProps = {\n    width: number;\n    height: number;\n    margin?: { top: number; right: number; bottom: number; left: number };\n    separation?: number;\n    events?: boolean;\n};\n\nconst defaultMargin = { top: 100, left: 50, right: 50, bottom: 50 };\n\nexport default ({\n    width,\n    height,\n    events = false,\n    margin = defaultMargin,\n    separation = 50\n}: HeatmapProps) =>\n{\n    const[valueOfSelectedBin, setValueOfSelectedBin] = useState(0);\n\n    const onBinClick = (bin: any) =>\n    {\n        console.log(bin.bin.count);\n        setValueOfSelectedBin(bin.bin.count);\n    };\n    // bounds\n    const size =\n        width > margin.left + margin.right ? width - margin.left - margin.right - separation : width;\n    const xMax = size / 2;\n    const yMax = height - margin.bottom - margin.top;\n\n    const binWidth = xMax / binData.length;\n    const binHeight = yMax / bucketSizeMax;\n    const radius = min([binWidth, binHeight], d => d) / 2;\n\n    xScale.range([0, xMax]);\n    yScale.range([yMax, 0]);\n\n    return width < 10 ? null : (\n        <div className='heatmap-box'>\n            <p className='selected-value'>Selected Value: {valueOfSelectedBin.toFixed(3)}&#37;</p>\n        <svg width={ width/2 } height={ height }>\n           \n            <g transform={`translate(${margin.left + 30},${margin.top - 150})`}>\n                <HeatmapRect\n                    data={ binData }\n                    xScale={ xScale }\n                    yScale={ yScale }\n                    colorScale={ rectColorScale }\n                    opacityScale={ opacityScale }\n                    binWidth={ binWidth }\n                    binHeight={ binWidth }\n                    gap={ 5 }\n                >\n                    { heatmap =>\n                        heatmap.map(heatmapBins =>\n                            heatmapBins.map(bin => (\n                                <rect\n                                    key={ `heatmap-rect-${ bin.row }-${ bin.column }` }\n                                    className=\"vx-heatmap-rect heatmap-bin\"\n                                    width={ bin.width }\n                                    height={ bin.height }\n                                    x={ bin.x }\n                                    y={ bin.y }\n                                    fill={ bin.color }\n                                    fillOpacity={ bin.opacity }\n                                    onClick={ () =>\n                                    {\n                                        //if (!events) return;\n                                        const { row, column } = bin;\n                                        if(bin.bin)\n                                        {                 \n                                            onBinClick(bin);\n                                        }            \n                                        console.log(JSON.stringify({ row, column, bin: bin.bin }));\n                                    } }\n                                />\n                            )),\n                        )\n                    }\n                </HeatmapRect>\n                </g>\n\n            <g transform={'translate(21, -110)'}>\n                <DefaultAxis width={width / 2.25} height={height} values={[0.001, 0.01, 0.1, 1, 10, 100, 1000].reverse()} orientation=\"left\" margin={{ top: 30, right: 25, bottom: 350, left: 50 }} dyTickLabel='0.3em' dxTickLabel='-1.5em' />\n            </g>\n            <g transform={'translate(50, -113)'}>\n                <DefaultAxis width={width / 2.2} height={height} values={[0.001, 0.01, 0.1, 1, 10, 100, 1000]} orientation=\"bottom\"/>\n            </g>\n        </svg>\n        </div>\n    );\n};"]},"metadata":{},"sourceType":"module"}