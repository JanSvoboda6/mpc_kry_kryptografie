{"ast":null,"code":"var _jsxFileName = \"/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/dataset/Datasets.tsx\";\nimport React, { useEffect } from 'react';\nimport FileBrowser from 'react-keyed-file-browser';\nimport Moment from 'moment';\nimport { Icons } from 'react-keyed-file-browser';\nimport '../../styles/Datasets.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { useState } from 'react';\nimport DatasetService from './DatasetService';\nimport loadingAnimation from \"../../styles/loading_graphics.gif\";\nimport FadeIn from 'react-fade-in';\nimport DatasetUtility from \"./DatasetUtility\";\n\nfunction Datasets(props) {\n  const [isLoaded, setLoaded] = useState(false);\n  const [files, setFiles] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  useEffect(() => {\n    DatasetService.getFiles().then(res => {\n      const files = [];\n\n      if (res.data) {\n        res.data.forEach(file => {\n          if (file.key.endsWith('/')) {\n            files.push({\n              key: file.key\n            });\n            return;\n          }\n\n          files.push(file);\n        });\n      }\n\n      setFiles(files);\n      setLoaded(true);\n    }, error => {\n      setErrorMessage(error.message);\n      setLoaded(true);\n    });\n  }, []);\n\n  const handleCreateFolder = key => {\n    setLoaded(false);\n    const folder = {\n      key: key\n    };\n    setFiles(folders => [...folders, folder]);\n    DatasetService.createDirectory(folder).then(() => setLoaded(true));\n  };\n\n  const handleCreateFiles = (addedFiles, prefix) => {\n    const uniqueAddedFiles = DatasetUtility.getUniqueAddedFiles(files, addedFiles, prefix);\n    DatasetService.uploadFiles(uniqueAddedFiles);\n    setFiles(existingFiles => [...existingFiles, ...uniqueAddedFiles]);\n  };\n\n  const handleDeleteFolder = folderKeys => {\n    setFiles(DatasetUtility.deleteSelectedFolders(files, folderKeys));\n  };\n\n  const handleDeleteFile = fileKeys => {\n    setFiles(DatasetUtility.deleteSelectedFiles(files, fileKeys));\n  };\n\n  const handleRenameFile = (oldKey, newKey) => {\n    setFiles(DatasetUtility.renameFile(files, oldKey, newKey));\n  };\n\n  const handleRenameFolder = (oldKey, newKey) => {\n    setFiles(DatasetUtility.renameFolder(files, oldKey, newKey));\n  };\n\n  const handleDownloadFile = key => {\n    console.log(key);\n  };\n\n  const handleDownloadFolder = key => {\n    console.log(key);\n  }; // handleFileSelection(file)\n  // {\n  //     console.log(file.key);\n  // }\n  // handleNone(fileInformation)\n  // {\n  //     console.log(fileInformation.file);\n  //     return (<div>  Selected file: {fileInformation.file.key} </div>)\n  // }\n\n\n  const handleFolderSelection = folder => {\n    if (props.handleFolderSelection) {\n      props.handleFolderSelection(folder);\n    }\n  };\n\n  if (!isLoaded) {\n    return /*#__PURE__*/React.createElement(FadeIn, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading-animation-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"dataset-loading-animation\",\n      src: loadingAnimation,\n      alt: \"loadingAnimation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FadeIn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-editor-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FileBrowser, {\n    files: files.map(file => {\n      const modifiedTimeInUnixFormat = file.modified ? file.modified : 0;\n\n      if (modifiedTimeInUnixFormat !== 0) {\n        const modified = Moment.duration(modifiedTimeInUnixFormat * 1000);\n        return {\n          key: file.key,\n          modified: +modified,\n          size: file.size\n        };\n      }\n\n      return {\n        key: file.key\n      };\n    }),\n    icons: Icons.FontAwesome(4),\n    onCreateFolder: handleCreateFolder,\n    onCreateFiles: handleCreateFiles,\n    onSelectFolder: folder => handleFolderSelection(folder),\n    onMoveFolder: (oldKey, newKey) => handleRenameFolder(oldKey, newKey),\n    onMoveFile: (oldKey, newKey) => handleRenameFile(oldKey, newKey),\n    onRenameFolder: (oldKey, newKey) => handleRenameFolder(oldKey, newKey),\n    onRenameFile: (oldKey, newKey) => handleRenameFile(oldKey, newKey),\n    onDeleteFolder: handleDeleteFolder,\n    onDeleteFile: handleDeleteFile,\n    onDownloadFile: handleDownloadFile,\n    onDownloadFolder: handleDownloadFolder // onSelectFile={(file) => this.handleFileSelection(file)}\n    // detailRenderer={(fileInformation) => this.handleNone(fileInformation)}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }))));\n}\n\nexport default Datasets;","map":{"version":3,"sources":["/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/dataset/Datasets.tsx"],"names":["React","useEffect","FileBrowser","Moment","Icons","useState","DatasetService","loadingAnimation","FadeIn","DatasetUtility","Datasets","props","isLoaded","setLoaded","files","setFiles","errorMessage","setErrorMessage","getFiles","then","res","data","forEach","file","key","endsWith","push","error","message","handleCreateFolder","folder","folders","createDirectory","handleCreateFiles","addedFiles","prefix","uniqueAddedFiles","getUniqueAddedFiles","uploadFiles","existingFiles","handleDeleteFolder","folderKeys","deleteSelectedFolders","handleDeleteFile","fileKeys","deleteSelectedFiles","handleRenameFile","oldKey","newKey","renameFile","handleRenameFolder","renameFolder","handleDownloadFile","console","log","handleDownloadFolder","handleFolderSelection","map","modifiedTimeInUnixFormat","modified","duration","size","FontAwesome"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\nimport FileBrowser from 'react-keyed-file-browser';\nimport Moment from 'moment';\nimport {Icons} from 'react-keyed-file-browser';\nimport '../../styles/Datasets.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport {useState} from 'react';\nimport axios, {AxiosResponse} from 'axios';\nimport {FileInformation} from '../../types';\nimport DatasetService from './DatasetService';\nimport loadingAnimation from \"../../styles/loading_graphics.gif\";\nimport FadeIn from 'react-fade-in';\nimport DatasetUtility from \"./DatasetUtility\";\n\nfunction Datasets(props)\n{\n    const [isLoaded, setLoaded] = useState(false);\n    const [files, setFiles] = useState<FileInformation[]>([]);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    useEffect(() =>\n    {\n        DatasetService.getFiles()\n            .then(\n                (res: AxiosResponse<any>) =>\n                {\n                    const files: Array<FileInformation> = [];\n                    if (res.data)\n                    {\n                        res.data.forEach(file =>\n                        {\n                            if (file.key.endsWith('/'))\n                            {\n                                files.push({key: file.key});\n                                return;\n                            }\n                            files.push(file);\n                        });\n                    }\n                    setFiles(files);\n                    setLoaded(true);\n                },\n                (error) =>\n                {\n                    setErrorMessage(error.message);\n                    setLoaded(true);\n                }\n            )\n    }, [])\n\n    const handleCreateFolder = (key: string) =>\n    {\n        setLoaded(false);\n        const folder: FileInformation = {key: key};\n        setFiles(folders => [...folders, folder]);\n        DatasetService.createDirectory(folder).then(() => setLoaded(true));\n    }\n\n    const handleCreateFiles = (addedFiles: File[], prefix: string) =>\n    {\n        const uniqueAddedFiles: FileInformation[] = DatasetUtility.getUniqueAddedFiles(files, addedFiles, prefix);\n        DatasetService.uploadFiles(uniqueAddedFiles);\n        setFiles(existingFiles => [...existingFiles, ...uniqueAddedFiles]);\n    }\n\n    const handleDeleteFolder = (folderKeys: string[]) =>\n    {\n        setFiles(DatasetUtility.deleteSelectedFolders(files, folderKeys));\n    }\n\n    const handleDeleteFile = (fileKeys: string[]) =>\n    {\n        setFiles(DatasetUtility.deleteSelectedFiles(files, fileKeys));\n    }\n\n    const handleRenameFile = (oldKey: string, newKey: string) =>\n    {\n        setFiles(DatasetUtility.renameFile(files, oldKey, newKey));\n    }\n\n    const handleRenameFolder = (oldKey: string, newKey: string) =>\n    {\n        setFiles(DatasetUtility.renameFolder(files, oldKey, newKey));\n    }\n\n    const handleDownloadFile = (key: string) => {\n        console.log(key);\n    }\n\n    const handleDownloadFolder = (key: string) => {\n        console.log(key);\n    }\n\n    // handleFileSelection(file)\n    // {\n    //     console.log(file.key);\n    // }\n\n    // handleNone(fileInformation)\n    // {\n    //     console.log(fileInformation.file);\n    //     return (<div>  Selected file: {fileInformation.file.key} </div>)\n    // }\n\n    const handleFolderSelection = (folder) =>\n    {\n        if (props.handleFolderSelection)\n        {\n            props.handleFolderSelection(folder)\n        }\n    }\n\n    if (!isLoaded)\n    {\n        return <FadeIn>\n            <div className='loading-animation-wrapper'>\n                <img className='dataset-loading-animation' src={loadingAnimation} alt=\"loadingAnimation\"/>\n            </div>\n        </FadeIn>\n    }\n    return (\n        <div>\n            <FadeIn>\n                <div className=\"file-editor-wrapper\">\n                    <FileBrowser\n                        files={files.map(file =>\n                        {\n                            const modifiedTimeInUnixFormat = file.modified ? file.modified : 0;\n                            if (modifiedTimeInUnixFormat !== 0)\n                            {\n                                const modified = Moment.duration(modifiedTimeInUnixFormat * 1000);\n                                return ({\n                                    key: file.key,\n                                    modified: +modified,\n                                    size: file.size\n                                })\n                            }\n                            return ({\n                                key: file.key\n                            })\n                        })}\n                        icons={Icons.FontAwesome(4)}\n\n                        onCreateFolder={handleCreateFolder}\n                        onCreateFiles={handleCreateFiles}\n                        onSelectFolder={(folder) => handleFolderSelection(folder)}\n                        onMoveFolder={(oldKey, newKey) => handleRenameFolder(oldKey, newKey)}\n                        onMoveFile={(oldKey, newKey) => handleRenameFile(oldKey, newKey)}\n                        onRenameFolder={(oldKey, newKey) => handleRenameFolder(oldKey, newKey)}\n                        onRenameFile={(oldKey, newKey) => handleRenameFile(oldKey, newKey)}\n                        onDeleteFolder={handleDeleteFolder}\n                        onDeleteFile={handleDeleteFile}\n                        onDownloadFile={handleDownloadFile}\n                        onDownloadFolder={handleDownloadFolder}\n                        // onSelectFile={(file) => this.handleFileSelection(file)}\n                        // detailRenderer={(fileInformation) => this.handleNone(fileInformation)}\n                    />\n                </div>\n            </FadeIn>\n        </div>\n    )\n}\n\nexport default Datasets;"]},"metadata":{},"sourceType":"module"}