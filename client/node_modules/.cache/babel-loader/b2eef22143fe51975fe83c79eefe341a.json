{"ast":null,"code":"var _jsxFileName = \"/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/analysis/XyChart.tsx\";\nimport React from 'react';\nimport ExampleControls from './ExampleControls';\nimport CustomChartBackground from './CustomChartBackground';\nexport default function XyChart(_ref) {\n  let {\n    height\n  } = _ref;\n  return /*#__PURE__*/React.createElement(ExampleControls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, _ref2 => {\n    let {\n      accessors,\n      animationTrajectory,\n      annotationDataKey,\n      annotationDatum,\n      annotationLabelPosition,\n      annotationType,\n      colorAccessorFactory,\n      config,\n      curve,\n      data,\n      editAnnotationLabelPosition,\n      numTicks,\n      renderAreaSeries,\n      renderAreaStack,\n      renderBarGroup,\n      renderBarSeries,\n      renderBarStack,\n      renderGlyph,\n      renderGlyphSeries,\n      enableTooltipGlyph,\n      renderTooltipGlyph,\n      renderHorizontally,\n      renderLineSeries,\n      setAnnotationDataIndex,\n      setAnnotationDataKey,\n      setAnnotationLabelPosition,\n      sharedTooltip,\n      showGridColumns,\n      showGridRows,\n      showHorizontalCrosshair,\n      showTooltip,\n      showVerticalCrosshair,\n      snapTooltipToDatumX,\n      snapTooltipToDatumY,\n      stackOffset,\n      theme,\n      xAxisOrientation,\n      yAxisOrientation,\n      // components are animated or not depending on selection\n      Annotation,\n      AreaSeries,\n      AreaStack,\n      Axis,\n      BarGroup,\n      BarSeries,\n      BarStack,\n      GlyphSeries,\n      Grid,\n      LineSeries,\n      AnnotationCircleSubject,\n      AnnotationConnector,\n      AnnotationLabel,\n      AnnotationLineSubject,\n      Tooltip,\n      XYChart\n    } = _ref2;\n    return /*#__PURE__*/React.createElement(XYChart, {\n      theme: theme,\n      xScale: config.x,\n      yScale: config.y,\n      height: Math.min(400, height),\n      captureEvents: !editAnnotationLabelPosition,\n      onPointerUp: d => {\n        setAnnotationDataKey(d.key);\n        setAnnotationDataIndex(d.index);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CustomChartBackground, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      key: `grid-${animationTrajectory}` // force animate on update\n      ,\n      rows: showGridRows,\n      columns: showGridColumns,\n      animationTrajectory: animationTrajectory,\n      numTicks: numTicks,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }), renderBarStack && /*#__PURE__*/React.createElement(BarStack, {\n      offset: stackOffset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BarSeries, {\n      dataKey: \"New York\",\n      data: data,\n      xAccessor: accessors.x['New York'],\n      yAccessor: accessors.y['New York'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(BarSeries, {\n      dataKey: \"San Francisco\",\n      data: data,\n      xAccessor: accessors.x['San Francisco'],\n      yAccessor: accessors.y['San Francisco'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(BarSeries, {\n      dataKey: \"Austin\",\n      data: data,\n      xAccessor: accessors.x.Austin,\n      yAccessor: accessors.y.Austin,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 29\n      }\n    })), renderBarGroup && /*#__PURE__*/React.createElement(BarGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BarSeries, {\n      dataKey: \"New York\",\n      data: data,\n      xAccessor: accessors.x['New York'],\n      yAccessor: accessors.y['New York'],\n      colorAccessor: colorAccessorFactory('New York'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(BarSeries, {\n      dataKey: \"San Francisco\",\n      data: data,\n      xAccessor: accessors.x['San Francisco'],\n      yAccessor: accessors.y['San Francisco'],\n      colorAccessor: colorAccessorFactory('San Francisco'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(BarSeries, {\n      dataKey: \"Austin\",\n      data: data,\n      xAccessor: accessors.x.Austin,\n      yAccessor: accessors.y.Austin,\n      colorAccessor: colorAccessorFactory('Austin'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 29\n      }\n    })), renderBarSeries && /*#__PURE__*/React.createElement(BarSeries, {\n      dataKey: \"New York\",\n      data: data,\n      xAccessor: accessors.x['New York'],\n      yAccessor: accessors.y['New York'],\n      colorAccessor: colorAccessorFactory('New York'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      }\n    }), renderAreaSeries && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AreaSeries, {\n      dataKey: \"Austin\",\n      data: data,\n      xAccessor: accessors.x.Austin,\n      yAccessor: accessors.y.Austin,\n      fillOpacity: 0.4,\n      curve: curve,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(AreaSeries, {\n      dataKey: \"New York\",\n      data: data,\n      xAccessor: accessors.x['New York'],\n      yAccessor: accessors.y['New York'],\n      fillOpacity: 0.4,\n      curve: curve,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(AreaSeries, {\n      dataKey: \"San Francisco\",\n      data: data,\n      xAccessor: accessors.x['San Francisco'],\n      yAccessor: accessors.y['San Francisco'],\n      fillOpacity: 0.4,\n      curve: curve,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 29\n      }\n    })), renderAreaStack && /*#__PURE__*/React.createElement(AreaStack, {\n      curve: curve,\n      offset: stackOffset,\n      renderLine: stackOffset !== 'wiggle',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(AreaSeries, {\n      dataKey: \"Austin\",\n      data: data,\n      xAccessor: accessors.x.Austin,\n      yAccessor: accessors.y.Austin,\n      fillOpacity: 0.4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(AreaSeries, {\n      dataKey: \"New York\",\n      data: data,\n      xAccessor: accessors.x['New York'],\n      yAccessor: accessors.y['New York'],\n      fillOpacity: 0.4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(AreaSeries, {\n      dataKey: \"San Francisco\",\n      data: data,\n      xAccessor: accessors.x['San Francisco'],\n      yAccessor: accessors.y['San Francisco'],\n      fillOpacity: 0.4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 29\n      }\n    })), renderLineSeries && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LineSeries, {\n      dataKey: \"Austin\",\n      data: data,\n      xAccessor: accessors.x.Austin,\n      yAccessor: accessors.y.Austin,\n      curve: curve,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 29\n      }\n    }), !renderBarSeries && /*#__PURE__*/React.createElement(LineSeries, {\n      dataKey: \"New York\",\n      data: data,\n      xAccessor: accessors.x['New York'],\n      yAccessor: accessors.y['New York'],\n      curve: curve,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(LineSeries, {\n      dataKey: \"San Francisco\",\n      data: data,\n      xAccessor: accessors.x['San Francisco'],\n      yAccessor: accessors.y['San Francisco'],\n      curve: curve,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Axis, {\n      key: `time-axis-${animationTrajectory}-${renderHorizontally}`,\n      orientation: renderHorizontally ? yAxisOrientation : xAxisOrientation,\n      numTicks: numTicks,\n      animationTrajectory: animationTrajectory,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Axis, {\n      key: `temp-axis-${animationTrajectory}-${renderHorizontally}`,\n      label: stackOffset == null ? 'Accuracy %' : stackOffset === 'expand' ? 'Fraction of total temperature' : '',\n      orientation: renderHorizontally ? xAxisOrientation : yAxisOrientation,\n      numTicks: numTicks,\n      animationTrajectory: animationTrajectory // values don't make sense in stream graph\n      ,\n      tickFormat: stackOffset === 'wiggle' ? () => '' : undefined,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 21\n      }\n    }), annotationDataKey && annotationDatum && /*#__PURE__*/React.createElement(Annotation, {\n      dataKey: annotationDataKey,\n      datum: annotationDatum,\n      dx: annotationLabelPosition.dx,\n      dy: annotationLabelPosition.dy,\n      editable: editAnnotationLabelPosition,\n      canEditSubject: false,\n      onDragEnd: _ref3 => {\n        let {\n          dx,\n          dy\n        } = _ref3;\n        return setAnnotationLabelPosition({\n          dx,\n          dy\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(AnnotationConnector, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 29\n      }\n    }), annotationType === 'circle' ? /*#__PURE__*/React.createElement(AnnotationCircleSubject, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 33\n      }\n    }) : /*#__PURE__*/React.createElement(AnnotationLineSubject, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(AnnotationLabel, {\n      title: annotationDataKey,\n      subtitle: `${annotationDatum.date}, ${annotationDatum[annotationDataKey]}°F`,\n      width: 135,\n      backgroundProps: {\n        stroke: theme.gridStyles.stroke,\n        strokeOpacity: 0.5,\n        fillOpacity: 0.8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 29\n      }\n    })), showTooltip && /*#__PURE__*/React.createElement(Tooltip, {\n      showHorizontalCrosshair: showHorizontalCrosshair,\n      showVerticalCrosshair: showVerticalCrosshair,\n      snapTooltipToDatumX: snapTooltipToDatumX,\n      snapTooltipToDatumY: snapTooltipToDatumY,\n      showDatumGlyph: (snapTooltipToDatumX || snapTooltipToDatumY) && !renderBarGroup,\n      showSeriesGlyphs: sharedTooltip && !renderBarGroup,\n      renderGlyph: enableTooltipGlyph ? renderTooltipGlyph : undefined,\n      renderTooltip: _ref4 => {\n        var _tooltipData$nearestD, _tooltipData$nearestD2, _tooltipData$datumByK, _tooltipData$nearestD3;\n\n        let {\n          tooltipData,\n          colorScale\n        } = _ref4;\n        return /*#__PURE__*/React.createElement(React.Fragment, null, (tooltipData === null || tooltipData === void 0 ? void 0 : (_tooltipData$nearestD = tooltipData.nearestDatum) === null || _tooltipData$nearestD === void 0 ? void 0 : _tooltipData$nearestD.datum) && accessors.date(tooltipData === null || tooltipData === void 0 ? void 0 : (_tooltipData$nearestD2 = tooltipData.nearestDatum) === null || _tooltipData$nearestD2 === void 0 ? void 0 : _tooltipData$nearestD2.datum) || 'No date', /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 19\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 19\n          }\n        }), (sharedTooltip ? Object.keys((_tooltipData$datumByK = tooltipData === null || tooltipData === void 0 ? void 0 : tooltipData.datumByKey) !== null && _tooltipData$datumByK !== void 0 ? _tooltipData$datumByK : {}) : [tooltipData === null || tooltipData === void 0 ? void 0 : (_tooltipData$nearestD3 = tooltipData.nearestDatum) === null || _tooltipData$nearestD3 === void 0 ? void 0 : _tooltipData$nearestD3.key]).filter(city => city).map(city => {\n          var _tooltipData$nearestD4, _tooltipData$nearestD5;\n\n          const temperature = (tooltipData === null || tooltipData === void 0 ? void 0 : (_tooltipData$nearestD4 = tooltipData.nearestDatum) === null || _tooltipData$nearestD4 === void 0 ? void 0 : _tooltipData$nearestD4.datum) && accessors[renderHorizontally ? 'x' : 'y'][city](tooltipData === null || tooltipData === void 0 ? void 0 : (_tooltipData$nearestD5 = tooltipData.nearestDatum) === null || _tooltipData$nearestD5 === void 0 ? void 0 : _tooltipData$nearestD5.datum);\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: city,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"em\", {\n            style: {\n              color: colorScale === null || colorScale === void 0 ? void 0 : colorScale(city)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 25\n            }\n          }, \"Accuracy\"), ' ', temperature == null || Number.isNaN(temperature) ? '–' : `${temperature}%`);\n        }));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 13\n      }\n    }));\n  });\n}","map":{"version":3,"sources":["/Users/jan/dev/thesis/ml_runner/react/ml-runner/src/components/analysis/XyChart.tsx"],"names":["React","ExampleControls","CustomChartBackground","XyChart","height","accessors","animationTrajectory","annotationDataKey","annotationDatum","annotationLabelPosition","annotationType","colorAccessorFactory","config","curve","data","editAnnotationLabelPosition","numTicks","renderAreaSeries","renderAreaStack","renderBarGroup","renderBarSeries","renderBarStack","renderGlyph","renderGlyphSeries","enableTooltipGlyph","renderTooltipGlyph","renderHorizontally","renderLineSeries","setAnnotationDataIndex","setAnnotationDataKey","setAnnotationLabelPosition","sharedTooltip","showGridColumns","showGridRows","showHorizontalCrosshair","showTooltip","showVerticalCrosshair","snapTooltipToDatumX","snapTooltipToDatumY","stackOffset","theme","xAxisOrientation","yAxisOrientation","Annotation","AreaSeries","AreaStack","Axis","BarGroup","BarSeries","BarStack","GlyphSeries","Grid","LineSeries","AnnotationCircleSubject","AnnotationConnector","AnnotationLabel","AnnotationLineSubject","Tooltip","XYChart","x","y","Math","min","d","key","index","Austin","undefined","dx","dy","date","stroke","gridStyles","strokeOpacity","fillOpacity","tooltipData","colorScale","nearestDatum","datum","Object","keys","datumByKey","filter","city","map","temperature","color","Number","isNaN"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { CityTemperature } from '@visx/mock-data/lib/mocks/cityTemperature';\n\nimport ExampleControls from './ExampleControls';\nimport CustomChartBackground from './CustomChartBackground';\n\nexport type XYChartProps = {\n    width: number;\n    height: number;\n};\n\ntype City = 'Class #1' | 'Class #2' | 'Average Accuracy';\n\nexport default function XyChart({ height }: XYChartProps)\n{\n    return (\n        <ExampleControls>\n            { ({\n                accessors,\n                animationTrajectory,\n                annotationDataKey,\n                annotationDatum,\n                annotationLabelPosition,\n                annotationType,\n                colorAccessorFactory,\n                config,\n                curve,\n                data,\n                editAnnotationLabelPosition,\n                numTicks,\n                renderAreaSeries,\n                renderAreaStack,\n                renderBarGroup,\n                renderBarSeries,\n                renderBarStack,\n                renderGlyph,\n                renderGlyphSeries,\n                enableTooltipGlyph,\n                renderTooltipGlyph,\n                renderHorizontally,\n                renderLineSeries,\n                setAnnotationDataIndex,\n                setAnnotationDataKey,\n                setAnnotationLabelPosition,\n                sharedTooltip,\n                showGridColumns,\n                showGridRows,\n                showHorizontalCrosshair,\n                showTooltip,\n                showVerticalCrosshair,\n                snapTooltipToDatumX,\n                snapTooltipToDatumY,\n                stackOffset,\n                theme,\n                xAxisOrientation,\n                yAxisOrientation,\n\n                // components are animated or not depending on selection\n                Annotation,\n                AreaSeries,\n                AreaStack,\n                Axis,\n                BarGroup,\n                BarSeries,\n                BarStack,\n                GlyphSeries,\n                Grid,\n                LineSeries,\n                AnnotationCircleSubject,\n                AnnotationConnector,\n                AnnotationLabel,\n                AnnotationLineSubject,\n                Tooltip,\n                XYChart,\n            }) => (\n                <XYChart\n                    theme={ theme }\n                    xScale={ config.x }\n                    yScale={ config.y }\n                    height={ Math.min(400, height) }\n                    captureEvents={ !editAnnotationLabelPosition }\n                    onPointerUp={ (d) =>\n                    {\n                        setAnnotationDataKey(d.key as 'New York' | 'San Francisco' | 'Austin');\n                        setAnnotationDataIndex(d.index);\n                    } }\n                >\n                    <CustomChartBackground />\n                    <Grid\n                        key={ `grid-${ animationTrajectory }` } // force animate on update\n                        rows={ showGridRows }\n                        columns={ showGridColumns }\n                        animationTrajectory={ animationTrajectory }\n                        numTicks={ numTicks }\n                    />\n                    { renderBarStack && (\n                        <BarStack offset={ stackOffset }>\n                            <BarSeries\n                                dataKey=\"New York\"\n                                data={ data }\n                                xAccessor={ accessors.x['New York'] }\n                                yAccessor={ accessors.y['New York'] }\n                            />\n                            <BarSeries\n                                dataKey=\"San Francisco\"\n                                data={ data }\n                                xAccessor={ accessors.x['San Francisco'] }\n                                yAccessor={ accessors.y['San Francisco'] }\n                            />\n                            <BarSeries\n                                dataKey=\"Austin\"\n                                data={ data }\n                                xAccessor={ accessors.x.Austin }\n                                yAccessor={ accessors.y.Austin }\n                            />\n                        </BarStack>\n                    ) }\n                    { renderBarGroup && (\n                        <BarGroup>\n                            <BarSeries\n                                dataKey=\"New York\"\n                                data={ data }\n                                xAccessor={ accessors.x['New York'] }\n                                yAccessor={ accessors.y['New York'] }\n                                colorAccessor={ colorAccessorFactory('New York') }\n                            />\n                            <BarSeries\n                                dataKey=\"San Francisco\"\n                                data={ data }\n                                xAccessor={ accessors.x['San Francisco'] }\n                                yAccessor={ accessors.y['San Francisco'] }\n                                colorAccessor={ colorAccessorFactory('San Francisco') }\n                            />\n                            <BarSeries\n                                dataKey=\"Austin\"\n                                data={ data }\n                                xAccessor={ accessors.x.Austin }\n                                yAccessor={ accessors.y.Austin }\n                                colorAccessor={ colorAccessorFactory('Austin') }\n                            />\n                        </BarGroup>\n                    ) }\n                    { renderBarSeries && (\n                        <BarSeries\n                            dataKey=\"New York\"\n                            data={ data }\n                            xAccessor={ accessors.x['New York'] }\n                            yAccessor={ accessors.y['New York'] }\n                            colorAccessor={ colorAccessorFactory('New York') }\n                        />\n                    ) }\n                    { renderAreaSeries && (\n                        <>\n                            <AreaSeries\n                                dataKey=\"Austin\"\n                                data={ data }\n                                xAccessor={ accessors.x.Austin }\n                                yAccessor={ accessors.y.Austin }\n                                fillOpacity={ 0.4 }\n                                curve={ curve }\n                            />\n                            <AreaSeries\n                                dataKey=\"New York\"\n                                data={ data }\n                                xAccessor={ accessors.x['New York'] }\n                                yAccessor={ accessors.y['New York'] }\n                                fillOpacity={ 0.4 }\n                                curve={ curve }\n                            />\n                            <AreaSeries\n                                dataKey=\"San Francisco\"\n                                data={ data }\n                                xAccessor={ accessors.x['San Francisco'] }\n                                yAccessor={ accessors.y['San Francisco'] }\n                                fillOpacity={ 0.4 }\n                                curve={ curve }\n                            />\n                        </>\n                    ) }\n                    { renderAreaStack && (\n                        <AreaStack curve={ curve } offset={ stackOffset } renderLine={ stackOffset !== 'wiggle' }>\n                            <AreaSeries\n                                dataKey=\"Austin\"\n                                data={ data }\n                                xAccessor={ accessors.x.Austin }\n                                yAccessor={ accessors.y.Austin }\n                                fillOpacity={ 0.4 }\n                            />\n                            <AreaSeries\n                                dataKey=\"New York\"\n                                data={ data }\n                                xAccessor={ accessors.x['New York'] }\n                                yAccessor={ accessors.y['New York'] }\n                                fillOpacity={ 0.4 }\n                            />\n                            <AreaSeries\n                                dataKey=\"San Francisco\"\n                                data={ data }\n                                xAccessor={ accessors.x['San Francisco'] }\n                                yAccessor={ accessors.y['San Francisco'] }\n                                fillOpacity={ 0.4 }\n                            />\n                        </AreaStack>\n                    ) }\n                    { renderLineSeries && (\n                        <>\n                            <LineSeries\n                                dataKey=\"Austin\"\n                                data={ data }\n                                xAccessor={ accessors.x.Austin }\n                                yAccessor={ accessors.y.Austin }\n                                curve={ curve }\n                            />\n                            { !renderBarSeries && (\n                                <LineSeries\n                                    dataKey=\"New York\"\n                                    data={ data }\n                                    xAccessor={ accessors.x['New York'] }\n                                    yAccessor={ accessors.y['New York'] }\n                                    curve={ curve }\n                                />\n                            ) }\n                            <LineSeries\n                                dataKey=\"San Francisco\"\n                                data={ data }\n                                xAccessor={ accessors.x['San Francisco'] }\n                                yAccessor={ accessors.y['San Francisco'] }\n                                curve={ curve }\n                            />\n                        </>\n                    ) }\n                    <Axis\n                        key={ `time-axis-${ animationTrajectory }-${ renderHorizontally }` }\n                        orientation={ renderHorizontally ? yAxisOrientation : xAxisOrientation }\n                        numTicks={ numTicks }\n                        animationTrajectory={ animationTrajectory }\n                    />\n                    <Axis\n                        key={ `temp-axis-${ animationTrajectory }-${ renderHorizontally }` }\n                        label={\n                            stackOffset == null\n                                ? 'Accuracy %'\n                                : stackOffset === 'expand'\n                                    ? 'Fraction of total temperature'\n                                    : ''\n                        }\n                        orientation={ renderHorizontally ? xAxisOrientation : yAxisOrientation }\n                        numTicks={ numTicks }\n                        animationTrajectory={ animationTrajectory }\n                        // values don't make sense in stream graph\n                        tickFormat={ stackOffset === 'wiggle' ? () => '' : undefined }\n                    />\n                    { annotationDataKey && annotationDatum && (\n                        <Annotation\n                            dataKey={ annotationDataKey }\n                            datum={ annotationDatum }\n                            dx={ annotationLabelPosition.dx }\n                            dy={ annotationLabelPosition.dy }\n                            editable={ editAnnotationLabelPosition }\n                            canEditSubject={ false }\n                            onDragEnd={ ({ dx, dy }) => setAnnotationLabelPosition({ dx, dy }) }\n                        >\n                            <AnnotationConnector />\n                            { annotationType === 'circle' ? (\n                                <AnnotationCircleSubject />\n                            ) : (\n                                <AnnotationLineSubject />\n                            ) }\n                            <AnnotationLabel\n                                title={ annotationDataKey }\n                                subtitle={ `${ annotationDatum.date }, ${ annotationDatum[annotationDataKey] }°F` }\n                                width={ 135 }\n                                backgroundProps={ {\n                                    stroke: theme.gridStyles.stroke,\n                                    strokeOpacity: 0.5,\n                                    fillOpacity: 0.8,\n                                } }\n                            />\n                        </Annotation>\n                    ) }\n                    { showTooltip && (\n            <Tooltip<CityTemperature>\n              showHorizontalCrosshair={showHorizontalCrosshair}\n              showVerticalCrosshair={showVerticalCrosshair}\n              snapTooltipToDatumX={snapTooltipToDatumX}\n              snapTooltipToDatumY={snapTooltipToDatumY}\n              showDatumGlyph={(snapTooltipToDatumX || snapTooltipToDatumY) && !renderBarGroup}\n              showSeriesGlyphs={sharedTooltip && !renderBarGroup}\n              renderGlyph={enableTooltipGlyph ? renderTooltipGlyph : undefined}\n              renderTooltip={({ tooltipData, colorScale }) => (\n                <>\n                  {/** date */}\n                  {(tooltipData?.nearestDatum?.datum &&\n                    accessors.date(tooltipData?.nearestDatum?.datum)) ||\n                    'No date'}\n                  <br />\n                  <br />\n                  {/** temperatures */}\n                  {(\n                    (sharedTooltip\n                      ? Object.keys(tooltipData?.datumByKey ?? {})\n                      : [tooltipData?.nearestDatum?.key]\n                    ).filter((city) => city) as City[]\n                  ).map((city) => {\n                    const temperature =\n                      tooltipData?.nearestDatum?.datum &&\n                      accessors[renderHorizontally ? 'x' : 'y'][city](\n                        tooltipData?.nearestDatum?.datum,\n                      );\n\n                    return (\n                      <div key={city}>\n                        <em\n                          style={{\n                            color: colorScale?.(city),\n\n                          }}\n                        >\n                          Accuracy\n                        </em>{' '}\n                        {temperature == null || Number.isNaN(temperature)\n                          ? '–'\n                          : `${temperature}%`}\n                      </div>\n                    );\n                  })}\n                </>\n              )}\n            />\n          )}\n        </XYChart>\n                    ) }\n    </ExampleControls>\n            );\n}"]},"metadata":{},"sourceType":"module"}